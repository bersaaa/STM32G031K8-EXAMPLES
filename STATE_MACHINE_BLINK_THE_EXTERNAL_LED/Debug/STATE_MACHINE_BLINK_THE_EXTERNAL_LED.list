
STATE_MACHINE_BLINK_THE_EXTERNAL_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004c4  080004c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004c4  080004c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c4  080004c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004cc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004d0  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b0b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000707  00000000  00000000  00021b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00022438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013330  00000000  00000000  000225e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020ca  00000000  00000000  00035918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ce5e  00000000  00000000  000379e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4840  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  000b4894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000494 	.word	0x08000494

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000494 	.word	0x08000494

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <EXTI2_3_IRQHandler>:
#include "stm32g0xx.h"
void delay(volatile uint32_t);
enum mode{mode0, mode1, mode2, mode3, mode4, mode5};
volatile enum mode state;
void EXTI2_3_IRQHandler(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
if (state != 5) {
 8000218:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <EXTI2_3_IRQHandler+0x40>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	2b05      	cmp	r3, #5
 8000220:	d007      	beq.n	8000232 <EXTI2_3_IRQHandler+0x1e>
state ++;
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <EXTI2_3_IRQHandler+0x40>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	b2db      	uxtb	r3, r3
 8000228:	3301      	adds	r3, #1
 800022a:	b2da      	uxtb	r2, r3
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <EXTI2_3_IRQHandler+0x40>)
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	e002      	b.n	8000238 <EXTI2_3_IRQHandler+0x24>
}
else {
state = 0;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <EXTI2_3_IRQHandler+0x40>)
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
}
delay(100000);
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <EXTI2_3_IRQHandler+0x44>)
 800023a:	0018      	movs	r0, r3
 800023c:	f000 f89e 	bl	800037c <delay>
EXTI->RPR1 |= (1U << 3);
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <EXTI2_3_IRQHandler+0x48>)
 8000242:	68da      	ldr	r2, [r3, #12]
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <EXTI2_3_IRQHandler+0x48>)
 8000246:	2108      	movs	r1, #8
 8000248:	430a      	orrs	r2, r1
 800024a:	60da      	str	r2, [r3, #12]
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	20000020 	.word	0x20000020
 8000258:	000186a0 	.word	0x000186a0
 800025c:	40021800 	.word	0x40021800

08000260 <main>:
int main(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
/* Enable GPIOB clock */
RCC->IOPENR |= (1U << 1);
 8000264:	4b3c      	ldr	r3, [pc, #240]	; (8000358 <main+0xf8>)
 8000266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000268:	4b3b      	ldr	r3, [pc, #236]	; (8000358 <main+0xf8>)
 800026a:	2102      	movs	r1, #2
 800026c:	430a      	orrs	r2, r1
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
/* Setup PB3 as input */
GPIOB->MODER &= ~(3U << 2*3);
 8000270:	4b3a      	ldr	r3, [pc, #232]	; (800035c <main+0xfc>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b39      	ldr	r3, [pc, #228]	; (800035c <main+0xfc>)
 8000276:	21c0      	movs	r1, #192	; 0xc0
 8000278:	438a      	bics	r2, r1
 800027a:	601a      	str	r2, [r3, #0]
/* Setup PB0 as output */
GPIOB->MODER &= ~(3U);
 800027c:	4b37      	ldr	r3, [pc, #220]	; (800035c <main+0xfc>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b36      	ldr	r3, [pc, #216]	; (800035c <main+0xfc>)
 8000282:	2103      	movs	r1, #3
 8000284:	438a      	bics	r2, r1
 8000286:	601a      	str	r2, [r3, #0]
GPIOB->MODER |= (1U);
 8000288:	4b34      	ldr	r3, [pc, #208]	; (800035c <main+0xfc>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b33      	ldr	r3, [pc, #204]	; (800035c <main+0xfc>)
 800028e:	2101      	movs	r1, #1
 8000290:	430a      	orrs	r2, r1
 8000292:	601a      	str	r2, [r3, #0]
EXTI->RTSR1 |= (1U << 3); // B3
 8000294:	4b32      	ldr	r3, [pc, #200]	; (8000360 <main+0x100>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b31      	ldr	r3, [pc, #196]	; (8000360 <main+0x100>)
 800029a:	2108      	movs	r1, #8
 800029c:	430a      	orrs	r2, r1
 800029e:	601a      	str	r2, [r3, #0]
EXTI->EXTICR[0] |= (1U << 8*3);
 80002a0:	4b2f      	ldr	r3, [pc, #188]	; (8000360 <main+0x100>)
 80002a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80002a4:	4b2e      	ldr	r3, [pc, #184]	; (8000360 <main+0x100>)
 80002a6:	2180      	movs	r1, #128	; 0x80
 80002a8:	0449      	lsls	r1, r1, #17
 80002aa:	430a      	orrs	r2, r1
 80002ac:	661a      	str	r2, [r3, #96]	; 0x60
EXTI->IMR1 |= (1U << 3);
 80002ae:	4a2c      	ldr	r2, [pc, #176]	; (8000360 <main+0x100>)
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	58d3      	ldr	r3, [r2, r3]
 80002b4:	492a      	ldr	r1, [pc, #168]	; (8000360 <main+0x100>)
 80002b6:	2208      	movs	r2, #8
 80002b8:	4313      	orrs	r3, r2
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	508b      	str	r3, [r1, r2]
NVIC_SetPriority(EXTI2_3_IRQn, 0);
 80002be:	2100      	movs	r1, #0
 80002c0:	2006      	movs	r0, #6
 80002c2:	f7ff ff39 	bl	8000138 <__NVIC_SetPriority>
NVIC_EnableIRQ(EXTI2_3_IRQn);
 80002c6:	2006      	movs	r0, #6
 80002c8:	f7ff ff1c 	bl	8000104 <__NVIC_EnableIRQ>
while(1) {
switch(state){
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <main+0x104>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d8fa      	bhi.n	80002cc <main+0x6c>
 80002d6:	009a      	lsls	r2, r3, #2
 80002d8:	4b23      	ldr	r3, [pc, #140]	; (8000368 <main+0x108>)
 80002da:	18d3      	adds	r3, r2, r3
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	469f      	mov	pc, r3
case 0:
GPIOB->BRR |= (1U); // turn off led
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <main+0xfc>)
 80002e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002e4:	4b1d      	ldr	r3, [pc, #116]	; (800035c <main+0xfc>)
 80002e6:	2101      	movs	r1, #1
 80002e8:	430a      	orrs	r2, r1
 80002ea:	629a      	str	r2, [r3, #40]	; 0x28
break;
 80002ec:	e032      	b.n	8000354 <main+0xf4>
case 1:
GPIOB->ODR ^= (1U);
 80002ee:	4b1b      	ldr	r3, [pc, #108]	; (800035c <main+0xfc>)
 80002f0:	695a      	ldr	r2, [r3, #20]
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <main+0xfc>)
 80002f4:	2101      	movs	r1, #1
 80002f6:	404a      	eors	r2, r1
 80002f8:	615a      	str	r2, [r3, #20]
delay(3200000);
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <main+0x10c>)
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 f83d 	bl	800037c <delay>
break;
 8000302:	e027      	b.n	8000354 <main+0xf4>
case 2:
GPIOB->ODR ^= (1U);
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <main+0xfc>)
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <main+0xfc>)
 800030a:	2101      	movs	r1, #1
 800030c:	404a      	eors	r2, r1
 800030e:	615a      	str	r2, [r3, #20]
delay(1600000);
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <main+0x110>)
 8000312:	0018      	movs	r0, r3
 8000314:	f000 f832 	bl	800037c <delay>
break;
 8000318:	e01c      	b.n	8000354 <main+0xf4>
case 3:
GPIOB->ODR ^= (1U);
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <main+0xfc>)
 800031c:	695a      	ldr	r2, [r3, #20]
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <main+0xfc>)
 8000320:	2101      	movs	r1, #1
 8000322:	404a      	eors	r2, r1
 8000324:	615a      	str	r2, [r3, #20]
delay(800000);
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <main+0x114>)
 8000328:	0018      	movs	r0, r3
 800032a:	f000 f827 	bl	800037c <delay>
break;
 800032e:	e011      	b.n	8000354 <main+0xf4>
case 4:
GPIOB->ODR ^= (1U);
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <main+0xfc>)
 8000332:	695a      	ldr	r2, [r3, #20]
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <main+0xfc>)
 8000336:	2101      	movs	r1, #1
 8000338:	404a      	eors	r2, r1
 800033a:	615a      	str	r2, [r3, #20]
delay(160000);
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <main+0x118>)
 800033e:	0018      	movs	r0, r3
 8000340:	f000 f81c 	bl	800037c <delay>
break;
 8000344:	e006      	b.n	8000354 <main+0xf4>
case 5:
GPIOB->ODR |= (1U); // turn on led
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <main+0xfc>)
 8000348:	695a      	ldr	r2, [r3, #20]
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <main+0xfc>)
 800034c:	2101      	movs	r1, #1
 800034e:	430a      	orrs	r2, r1
 8000350:	615a      	str	r2, [r3, #20]
break;
 8000352:	46c0      	nop			; (mov r8, r8)
switch(state){
 8000354:	e7ba      	b.n	80002cc <main+0x6c>
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	40021000 	.word	0x40021000
 800035c:	50000400 	.word	0x50000400
 8000360:	40021800 	.word	0x40021800
 8000364:	20000020 	.word	0x20000020
 8000368:	080004ac 	.word	0x080004ac
 800036c:	0030d400 	.word	0x0030d400
 8000370:	00186a00 	.word	0x00186a00
 8000374:	000c3500 	.word	0x000c3500
 8000378:	00027100 	.word	0x00027100

0800037c <delay>:
}
}
return 0;
}
void delay(volatile uint32_t s) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
for(; s>0; s--);
 8000384:	e002      	b.n	800038c <delay+0x10>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	3b01      	subs	r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1f9      	bne.n	8000386 <delay+0xa>
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46bd      	mov	sp, r7
 8000398:	b002      	add	sp, #8
 800039a:	bd80      	pop	{r7, pc}

0800039c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <NMI_Handler+0x4>

080003a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <HardFault_Handler+0x4>

080003a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c0:	f000 f832 	bl	8000428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d8:	f7ff fff7 	bl	80003ca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003de:	490d      	ldr	r1, [pc, #52]	; (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e0:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f4:	4c0a      	ldr	r4, [pc, #40]	; (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000402:	f000 f823 	bl	800044c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000406:	f7ff ff2b 	bl	8000260 <main>

0800040a <LoopForever>:

LoopForever:
  b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   r0, =_estack
 800040c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000418:	080004cc 	.word	0x080004cc
  ldr r2, =_sbss
 800041c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000420:	20000028 	.word	0x20000028

08000424 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_IRQHandler>
	...

08000428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <HAL_IncTick+0x1c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	001a      	movs	r2, r3
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <HAL_IncTick+0x20>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	18d2      	adds	r2, r2, r3
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <HAL_IncTick+0x20>)
 800043a:	601a      	str	r2, [r3, #0]
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000000 	.word	0x20000000
 8000448:	20000024 	.word	0x20000024

0800044c <__libc_init_array>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	2600      	movs	r6, #0
 8000450:	4d0c      	ldr	r5, [pc, #48]	; (8000484 <__libc_init_array+0x38>)
 8000452:	4c0d      	ldr	r4, [pc, #52]	; (8000488 <__libc_init_array+0x3c>)
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	10a4      	asrs	r4, r4, #2
 8000458:	42a6      	cmp	r6, r4
 800045a:	d109      	bne.n	8000470 <__libc_init_array+0x24>
 800045c:	2600      	movs	r6, #0
 800045e:	f000 f819 	bl	8000494 <_init>
 8000462:	4d0a      	ldr	r5, [pc, #40]	; (800048c <__libc_init_array+0x40>)
 8000464:	4c0a      	ldr	r4, [pc, #40]	; (8000490 <__libc_init_array+0x44>)
 8000466:	1b64      	subs	r4, r4, r5
 8000468:	10a4      	asrs	r4, r4, #2
 800046a:	42a6      	cmp	r6, r4
 800046c:	d105      	bne.n	800047a <__libc_init_array+0x2e>
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	00b3      	lsls	r3, r6, #2
 8000472:	58eb      	ldr	r3, [r5, r3]
 8000474:	4798      	blx	r3
 8000476:	3601      	adds	r6, #1
 8000478:	e7ee      	b.n	8000458 <__libc_init_array+0xc>
 800047a:	00b3      	lsls	r3, r6, #2
 800047c:	58eb      	ldr	r3, [r5, r3]
 800047e:	4798      	blx	r3
 8000480:	3601      	adds	r6, #1
 8000482:	e7f2      	b.n	800046a <__libc_init_array+0x1e>
 8000484:	080004c4 	.word	0x080004c4
 8000488:	080004c4 	.word	0x080004c4
 800048c:	080004c4 	.word	0x080004c4
 8000490:	080004c8 	.word	0x080004c8

08000494 <_init>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr

080004a0 <_fini>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr
