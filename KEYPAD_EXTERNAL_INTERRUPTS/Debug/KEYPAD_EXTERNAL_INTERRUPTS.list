
KEYPAD_EXTERNAL_INTERRUPTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c48  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000d04  08000d04  00010d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d2c  08000d2c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000d2c  08000d2c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d2c  08000d2c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d2c  08000d2c  00010d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d30  08000d30  00010d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000d34  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000d38  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000d38  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b2c  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000713  00000000  00000000  00021b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00022270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  00022498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013330  00000000  00000000  00022678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022a1  00000000  00000000  000359a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ce85  00000000  00000000  00037c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4ace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000660  00000000  00000000  000b4b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000cec 	.word	0x08000cec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000cec 	.word	0x08000cec

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <keypad_setup>:

void set_Rows_Keypad(void);
void clear_Rows_Keypad(void);


void keypad_setup(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

		// Enable GPIOA clock
		    RCC->IOPENR |= (1U << 0);
 8000218:	4bbb      	ldr	r3, [pc, #748]	; (8000508 <keypad_setup+0x2f4>)
 800021a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800021c:	4bba      	ldr	r3, [pc, #744]	; (8000508 <keypad_setup+0x2f4>)
 800021e:	2101      	movs	r1, #1
 8000220:	430a      	orrs	r2, r1
 8000222:	635a      	str	r2, [r3, #52]	; 0x34

		// Enable GPIOB clock
		    RCC->IOPENR |= (1U << 1);
 8000224:	4bb8      	ldr	r3, [pc, #736]	; (8000508 <keypad_setup+0x2f4>)
 8000226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000228:	4bb7      	ldr	r3, [pc, #732]	; (8000508 <keypad_setup+0x2f4>)
 800022a:	2102      	movs	r1, #2
 800022c:	430a      	orrs	r2, r1
 800022e:	635a      	str	r2, [r3, #52]	; 0x34

		// Setup pa8, pb9, pb5, pb4 as output rows
		    GPIOA->MODER &= ~(3U << 2*8);
 8000230:	23a0      	movs	r3, #160	; 0xa0
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	23a0      	movs	r3, #160	; 0xa0
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	49b4      	ldr	r1, [pc, #720]	; (800050c <keypad_setup+0x2f8>)
 800023c:	400a      	ands	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
		    GPIOA->MODER |= (1U << 2*8);
 8000240:	23a0      	movs	r3, #160	; 0xa0
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	23a0      	movs	r3, #160	; 0xa0
 8000248:	05db      	lsls	r3, r3, #23
 800024a:	2180      	movs	r1, #128	; 0x80
 800024c:	0249      	lsls	r1, r1, #9
 800024e:	430a      	orrs	r2, r1
 8000250:	601a      	str	r2, [r3, #0]

		    GPIOB->MODER &= ~(3U << 2*9);
 8000252:	4baf      	ldr	r3, [pc, #700]	; (8000510 <keypad_setup+0x2fc>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4bae      	ldr	r3, [pc, #696]	; (8000510 <keypad_setup+0x2fc>)
 8000258:	49ae      	ldr	r1, [pc, #696]	; (8000514 <keypad_setup+0x300>)
 800025a:	400a      	ands	r2, r1
 800025c:	601a      	str	r2, [r3, #0]
		    GPIOB->MODER |= (1U << 2*9);
 800025e:	4bac      	ldr	r3, [pc, #688]	; (8000510 <keypad_setup+0x2fc>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4bab      	ldr	r3, [pc, #684]	; (8000510 <keypad_setup+0x2fc>)
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	02c9      	lsls	r1, r1, #11
 8000268:	430a      	orrs	r2, r1
 800026a:	601a      	str	r2, [r3, #0]

		    GPIOB->MODER &= ~(3U << 2*5);
 800026c:	4ba8      	ldr	r3, [pc, #672]	; (8000510 <keypad_setup+0x2fc>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4ba7      	ldr	r3, [pc, #668]	; (8000510 <keypad_setup+0x2fc>)
 8000272:	49a9      	ldr	r1, [pc, #676]	; (8000518 <keypad_setup+0x304>)
 8000274:	400a      	ands	r2, r1
 8000276:	601a      	str	r2, [r3, #0]
		    GPIOB->MODER |= (1U << 2*5);
 8000278:	4ba5      	ldr	r3, [pc, #660]	; (8000510 <keypad_setup+0x2fc>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4ba4      	ldr	r3, [pc, #656]	; (8000510 <keypad_setup+0x2fc>)
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	00c9      	lsls	r1, r1, #3
 8000282:	430a      	orrs	r2, r1
 8000284:	601a      	str	r2, [r3, #0]

		    GPIOB->MODER &= ~(3U << 2*4);
 8000286:	4ba2      	ldr	r3, [pc, #648]	; (8000510 <keypad_setup+0x2fc>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4ba1      	ldr	r3, [pc, #644]	; (8000510 <keypad_setup+0x2fc>)
 800028c:	49a3      	ldr	r1, [pc, #652]	; (800051c <keypad_setup+0x308>)
 800028e:	400a      	ands	r2, r1
 8000290:	601a      	str	r2, [r3, #0]
		    GPIOB->MODER |= (1U << 2*4);
 8000292:	4b9f      	ldr	r3, [pc, #636]	; (8000510 <keypad_setup+0x2fc>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b9e      	ldr	r3, [pc, #632]	; (8000510 <keypad_setup+0x2fc>)
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0049      	lsls	r1, r1, #1
 800029c:	430a      	orrs	r2, r1
 800029e:	601a      	str	r2, [r3, #0]

		//Setup pa9, pb0, pb2, pb8 as input columns
		    GPIOA->MODER &= ~(3U << 2*9);
 80002a0:	23a0      	movs	r3, #160	; 0xa0
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	23a0      	movs	r3, #160	; 0xa0
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	499a      	ldr	r1, [pc, #616]	; (8000514 <keypad_setup+0x300>)
 80002ac:	400a      	ands	r2, r1
 80002ae:	601a      	str	r2, [r3, #0]
		    GPIOA->PUPDR |= (2U << 2*9);
 80002b0:	23a0      	movs	r3, #160	; 0xa0
 80002b2:	05db      	lsls	r3, r3, #23
 80002b4:	68da      	ldr	r2, [r3, #12]
 80002b6:	23a0      	movs	r3, #160	; 0xa0
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	0309      	lsls	r1, r1, #12
 80002be:	430a      	orrs	r2, r1
 80002c0:	60da      	str	r2, [r3, #12]

		    GPIOB->MODER &= ~(3U << 0);
 80002c2:	4b93      	ldr	r3, [pc, #588]	; (8000510 <keypad_setup+0x2fc>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b92      	ldr	r3, [pc, #584]	; (8000510 <keypad_setup+0x2fc>)
 80002c8:	2103      	movs	r1, #3
 80002ca:	438a      	bics	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
		    GPIOB->PUPDR |= (2U << 0);
 80002ce:	4b90      	ldr	r3, [pc, #576]	; (8000510 <keypad_setup+0x2fc>)
 80002d0:	68da      	ldr	r2, [r3, #12]
 80002d2:	4b8f      	ldr	r3, [pc, #572]	; (8000510 <keypad_setup+0x2fc>)
 80002d4:	2102      	movs	r1, #2
 80002d6:	430a      	orrs	r2, r1
 80002d8:	60da      	str	r2, [r3, #12]

		    GPIOB->MODER &= ~(3U << 2*2);
 80002da:	4b8d      	ldr	r3, [pc, #564]	; (8000510 <keypad_setup+0x2fc>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b8c      	ldr	r3, [pc, #560]	; (8000510 <keypad_setup+0x2fc>)
 80002e0:	2130      	movs	r1, #48	; 0x30
 80002e2:	438a      	bics	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
		    GPIOB->PUPDR |= (2U << 2*2);
 80002e6:	4b8a      	ldr	r3, [pc, #552]	; (8000510 <keypad_setup+0x2fc>)
 80002e8:	68da      	ldr	r2, [r3, #12]
 80002ea:	4b89      	ldr	r3, [pc, #548]	; (8000510 <keypad_setup+0x2fc>)
 80002ec:	2120      	movs	r1, #32
 80002ee:	430a      	orrs	r2, r1
 80002f0:	60da      	str	r2, [r3, #12]

		    GPIOB->MODER &= ~(3U << 2*8);
 80002f2:	4b87      	ldr	r3, [pc, #540]	; (8000510 <keypad_setup+0x2fc>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b86      	ldr	r3, [pc, #536]	; (8000510 <keypad_setup+0x2fc>)
 80002f8:	4984      	ldr	r1, [pc, #528]	; (800050c <keypad_setup+0x2f8>)
 80002fa:	400a      	ands	r2, r1
 80002fc:	601a      	str	r2, [r3, #0]
		    GPIOB->PUPDR |= (2U << 2*8);
 80002fe:	4b84      	ldr	r3, [pc, #528]	; (8000510 <keypad_setup+0x2fc>)
 8000300:	68da      	ldr	r2, [r3, #12]
 8000302:	4b83      	ldr	r3, [pc, #524]	; (8000510 <keypad_setup+0x2fc>)
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	0289      	lsls	r1, r1, #10
 8000308:	430a      	orrs	r2, r1
 800030a:	60da      	str	r2, [r3, #12]

		// Setup interrupts for pa9, pb0,pb2,pb8
		    EXTI->EXTICR[2] |= (0U << 8*1); //pa9
 800030c:	4a84      	ldr	r2, [pc, #528]	; (8000520 <keypad_setup+0x30c>)
 800030e:	4b84      	ldr	r3, [pc, #528]	; (8000520 <keypad_setup+0x30c>)
 8000310:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000312:	669a      	str	r2, [r3, #104]	; 0x68
		    EXTI->EXTICR[0] |= (1U << 0);   //pb0
 8000314:	4b82      	ldr	r3, [pc, #520]	; (8000520 <keypad_setup+0x30c>)
 8000316:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000318:	4b81      	ldr	r3, [pc, #516]	; (8000520 <keypad_setup+0x30c>)
 800031a:	2101      	movs	r1, #1
 800031c:	430a      	orrs	r2, r1
 800031e:	661a      	str	r2, [r3, #96]	; 0x60
		    EXTI->EXTICR[0] |= (1U << 8*2); //pb2
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <keypad_setup+0x30c>)
 8000322:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000324:	4b7e      	ldr	r3, [pc, #504]	; (8000520 <keypad_setup+0x30c>)
 8000326:	2180      	movs	r1, #128	; 0x80
 8000328:	0249      	lsls	r1, r1, #9
 800032a:	430a      	orrs	r2, r1
 800032c:	661a      	str	r2, [r3, #96]	; 0x60
		    EXTI->EXTICR[2] |= (1U << 0);   //pb8
 800032e:	4b7c      	ldr	r3, [pc, #496]	; (8000520 <keypad_setup+0x30c>)
 8000330:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000332:	4b7b      	ldr	r3, [pc, #492]	; (8000520 <keypad_setup+0x30c>)
 8000334:	2101      	movs	r1, #1
 8000336:	430a      	orrs	r2, r1
 8000338:	669a      	str	r2, [r3, #104]	; 0x68

		//rising edge selected for pa9, pb0,pb2,pb8
		    EXTI->RTSR1 |= (1U << 9);
 800033a:	4b79      	ldr	r3, [pc, #484]	; (8000520 <keypad_setup+0x30c>)
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	4b78      	ldr	r3, [pc, #480]	; (8000520 <keypad_setup+0x30c>)
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	0089      	lsls	r1, r1, #2
 8000344:	430a      	orrs	r2, r1
 8000346:	601a      	str	r2, [r3, #0]
		    EXTI->RTSR1 |= (1U << 0);
 8000348:	4b75      	ldr	r3, [pc, #468]	; (8000520 <keypad_setup+0x30c>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b74      	ldr	r3, [pc, #464]	; (8000520 <keypad_setup+0x30c>)
 800034e:	2101      	movs	r1, #1
 8000350:	430a      	orrs	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
		    EXTI->RTSR1 |= (1U << 2);
 8000354:	4b72      	ldr	r3, [pc, #456]	; (8000520 <keypad_setup+0x30c>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4b71      	ldr	r3, [pc, #452]	; (8000520 <keypad_setup+0x30c>)
 800035a:	2104      	movs	r1, #4
 800035c:	430a      	orrs	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
		    EXTI->RTSR1 |= (1U << 8);
 8000360:	4b6f      	ldr	r3, [pc, #444]	; (8000520 <keypad_setup+0x30c>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b6e      	ldr	r3, [pc, #440]	; (8000520 <keypad_setup+0x30c>)
 8000366:	2180      	movs	r1, #128	; 0x80
 8000368:	0049      	lsls	r1, r1, #1
 800036a:	430a      	orrs	r2, r1
 800036c:	601a      	str	r2, [r3, #0]

		//mask register selected for pa9, pb0,pb2,pb8
		    EXTI->IMR1 |= (1U << 9);
 800036e:	4a6c      	ldr	r2, [pc, #432]	; (8000520 <keypad_setup+0x30c>)
 8000370:	2380      	movs	r3, #128	; 0x80
 8000372:	58d3      	ldr	r3, [r2, r3]
 8000374:	496a      	ldr	r1, [pc, #424]	; (8000520 <keypad_setup+0x30c>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	0092      	lsls	r2, r2, #2
 800037a:	4313      	orrs	r3, r2
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	508b      	str	r3, [r1, r2]
		    EXTI->IMR1 |= (1U << 0);
 8000380:	4a67      	ldr	r2, [pc, #412]	; (8000520 <keypad_setup+0x30c>)
 8000382:	2380      	movs	r3, #128	; 0x80
 8000384:	58d3      	ldr	r3, [r2, r3]
 8000386:	4966      	ldr	r1, [pc, #408]	; (8000520 <keypad_setup+0x30c>)
 8000388:	2201      	movs	r2, #1
 800038a:	4313      	orrs	r3, r2
 800038c:	2280      	movs	r2, #128	; 0x80
 800038e:	508b      	str	r3, [r1, r2]
		    EXTI->IMR1 |= (1U << 2);
 8000390:	4a63      	ldr	r2, [pc, #396]	; (8000520 <keypad_setup+0x30c>)
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	58d3      	ldr	r3, [r2, r3]
 8000396:	4962      	ldr	r1, [pc, #392]	; (8000520 <keypad_setup+0x30c>)
 8000398:	2204      	movs	r2, #4
 800039a:	4313      	orrs	r3, r2
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	508b      	str	r3, [r1, r2]
		    EXTI->IMR1 |= (1U << 8);
 80003a0:	4a5f      	ldr	r2, [pc, #380]	; (8000520 <keypad_setup+0x30c>)
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	58d3      	ldr	r3, [r2, r3]
 80003a6:	495e      	ldr	r1, [pc, #376]	; (8000520 <keypad_setup+0x30c>)
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	4313      	orrs	r3, r2
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	508b      	str	r3, [r1, r2]

		// enable NVIC and set interrupt priority
		    NVIC_SetPriority(EXTI0_1_IRQn, 0);
 80003b2:	2100      	movs	r1, #0
 80003b4:	2005      	movs	r0, #5
 80003b6:	f7ff febf 	bl	8000138 <__NVIC_SetPriority>
		    NVIC_EnableIRQ(EXTI0_1_IRQn);
 80003ba:	2005      	movs	r0, #5
 80003bc:	f7ff fea2 	bl	8000104 <__NVIC_EnableIRQ>

		    NVIC_SetPriority(EXTI2_3_IRQn, 0);
 80003c0:	2100      	movs	r1, #0
 80003c2:	2006      	movs	r0, #6
 80003c4:	f7ff feb8 	bl	8000138 <__NVIC_SetPriority>
		    NVIC_EnableIRQ(EXTI2_3_IRQn);
 80003c8:	2006      	movs	r0, #6
 80003ca:	f7ff fe9b 	bl	8000104 <__NVIC_EnableIRQ>

		    NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2007      	movs	r0, #7
 80003d2:	f7ff feb1 	bl	8000138 <__NVIC_SetPriority>
		    NVIC_EnableIRQ(EXTI4_15_IRQn);
 80003d6:	2007      	movs	r0, #7
 80003d8:	f7ff fe94 	bl	8000104 <__NVIC_EnableIRQ>


			 // SSD codes
			/* Setup PA0 as output */
			GPIOA->MODER &= ~(3U << 2 * 0);
 80003dc:	23a0      	movs	r3, #160	; 0xa0
 80003de:	05db      	lsls	r3, r3, #23
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	23a0      	movs	r3, #160	; 0xa0
 80003e4:	05db      	lsls	r3, r3, #23
 80003e6:	2103      	movs	r1, #3
 80003e8:	438a      	bics	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (1U << 2 * 0);
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	2101      	movs	r1, #1
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
			/* Setup PA1 as output */
			GPIOA->MODER &= ~(3U << 2 * 1);
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	23a0      	movs	r3, #160	; 0xa0
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	210c      	movs	r1, #12
 8000408:	438a      	bics	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (1U << 2 * 1);
 800040c:	23a0      	movs	r3, #160	; 0xa0
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	23a0      	movs	r3, #160	; 0xa0
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	2104      	movs	r1, #4
 8000418:	430a      	orrs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
			/* Setup PA4 as output */
			GPIOA->MODER &= ~(3U << 2 * 4);
 800041c:	23a0      	movs	r3, #160	; 0xa0
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	493d      	ldr	r1, [pc, #244]	; (800051c <keypad_setup+0x308>)
 8000428:	400a      	ands	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (1U << 2 * 4);
 800042c:	23a0      	movs	r3, #160	; 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	23a0      	movs	r3, #160	; 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	0049      	lsls	r1, r1, #1
 800043a:	430a      	orrs	r2, r1
 800043c:	601a      	str	r2, [r3, #0]
			/* Setup PA5 as output */
			GPIOA->MODER &= ~(3U << 2 * 5);
 800043e:	23a0      	movs	r3, #160	; 0xa0
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	23a0      	movs	r3, #160	; 0xa0
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	4933      	ldr	r1, [pc, #204]	; (8000518 <keypad_setup+0x304>)
 800044a:	400a      	ands	r2, r1
 800044c:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (1U << 2 * 5);
 800044e:	23a0      	movs	r3, #160	; 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	23a0      	movs	r3, #160	; 0xa0
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	00c9      	lsls	r1, r1, #3
 800045c:	430a      	orrs	r2, r1
 800045e:	601a      	str	r2, [r3, #0]
			/* Setup PA6 as output */
			GPIOA->MODER &= ~(3U << 2 * 6);
 8000460:	23a0      	movs	r3, #160	; 0xa0
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	23a0      	movs	r3, #160	; 0xa0
 8000468:	05db      	lsls	r3, r3, #23
 800046a:	492e      	ldr	r1, [pc, #184]	; (8000524 <keypad_setup+0x310>)
 800046c:	400a      	ands	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (1U << 2 * 6);
 8000470:	23a0      	movs	r3, #160	; 0xa0
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	23a0      	movs	r3, #160	; 0xa0
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	0149      	lsls	r1, r1, #5
 800047e:	430a      	orrs	r2, r1
 8000480:	601a      	str	r2, [r3, #0]
			/* Setup PA11 as output */
			GPIOA->MODER &= ~(3U << 2 * 11);
 8000482:	23a0      	movs	r3, #160	; 0xa0
 8000484:	05db      	lsls	r3, r3, #23
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	23a0      	movs	r3, #160	; 0xa0
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	4926      	ldr	r1, [pc, #152]	; (8000528 <keypad_setup+0x314>)
 800048e:	400a      	ands	r2, r1
 8000490:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (1U << 2 * 11);
 8000492:	23a0      	movs	r3, #160	; 0xa0
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	23a0      	movs	r3, #160	; 0xa0
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	03c9      	lsls	r1, r1, #15
 80004a0:	430a      	orrs	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
			/* Setup PA12 as output */
			GPIOA->MODER &= ~(3U << 2 * 12);
 80004a4:	23a0      	movs	r3, #160	; 0xa0
 80004a6:	05db      	lsls	r3, r3, #23
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	491f      	ldr	r1, [pc, #124]	; (800052c <keypad_setup+0x318>)
 80004b0:	400a      	ands	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
			GPIOA->MODER |= (1U << 2 * 12);
 80004b4:	23a0      	movs	r3, #160	; 0xa0
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	23a0      	movs	r3, #160	; 0xa0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0449      	lsls	r1, r1, #17
 80004c2:	430a      	orrs	r2, r1
 80004c4:	601a      	str	r2, [r3, #0]


			GPIOA -> ODR |= (1U << 8);  //PA0 A
 80004c6:	23a0      	movs	r3, #160	; 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	23a0      	movs	r3, #160	; 0xa0
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0049      	lsls	r1, r1, #1
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
			GPIOB -> ODR |= (1U << 9);  //PB1 B
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <keypad_setup+0x2fc>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <keypad_setup+0x2fc>)
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	0089      	lsls	r1, r1, #2
 80004e2:	430a      	orrs	r2, r1
 80004e4:	615a      	str	r2, [r3, #20]
			GPIOB -> ODR |= (1U << 5);  //PB2 C
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <keypad_setup+0x2fc>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <keypad_setup+0x2fc>)
 80004ec:	2120      	movs	r1, #32
 80004ee:	430a      	orrs	r2, r1
 80004f0:	615a      	str	r2, [r3, #20]
			GPIOB -> ODR |= (1U << 4);  //PB3 D
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <keypad_setup+0x2fc>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <keypad_setup+0x2fc>)
 80004f8:	2110      	movs	r1, #16
 80004fa:	430a      	orrs	r2, r1
 80004fc:	615a      	str	r2, [r3, #20]

			clearSSD();
 80004fe:	f000 f93d 	bl	800077c <clearSSD>
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000
 800050c:	fffcffff 	.word	0xfffcffff
 8000510:	50000400 	.word	0x50000400
 8000514:	fff3ffff 	.word	0xfff3ffff
 8000518:	fffff3ff 	.word	0xfffff3ff
 800051c:	fffffcff 	.word	0xfffffcff
 8000520:	40021800 	.word	0x40021800
 8000524:	ffffcfff 	.word	0xffffcfff
 8000528:	ff3fffff 	.word	0xff3fffff
 800052c:	fcffffff 	.word	0xfcffffff

08000530 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void){ //interrupt from pb0
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	clear_Rows_Keypad();
 8000534:	f000 fb0e 	bl	8000b54 <clear_Rows_Keypad>

	GPIOA->ODR ^= (1U << 8);
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	23a0      	movs	r3, #160	; 0xa0
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	2180      	movs	r1, #128	; 0x80
 8000544:	0049      	lsls	r1, r1, #1
 8000546:	404a      	eors	r2, r1
 8000548:	615a      	str	r2, [r3, #20]

	GPIOB->ODR ^= (1U << 9); //pb9
 800054a:	4b24      	ldr	r3, [pc, #144]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	0089      	lsls	r1, r1, #2
 8000554:	404a      	eors	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
	if ((GPIOB -> IDR >>0)& 1){
 8000558:	4b20      	ldr	r3, [pc, #128]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	2201      	movs	r2, #1
 800055e:	4013      	ands	r3, r2
 8000560:	d002      	beq.n	8000568 <EXTI0_1_IRQHandler+0x38>
			setSSD(9);
 8000562:	2009      	movs	r0, #9
 8000564:	f000 f94a 	bl	80007fc <setSSD>
		}
	GPIOB->ODR ^= (1U << 9); //pb9
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	0089      	lsls	r1, r1, #2
 8000572:	404a      	eors	r2, r1
 8000574:	615a      	str	r2, [r3, #20]


	GPIOB->ODR ^= (1U << 5); //pb5
 8000576:	4b19      	ldr	r3, [pc, #100]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 800057c:	2120      	movs	r1, #32
 800057e:	404a      	eors	r2, r1
 8000580:	615a      	str	r2, [r3, #20]
		if ((GPIOB -> IDR >>0)& 1){
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	2201      	movs	r2, #1
 8000588:	4013      	ands	r3, r2
 800058a:	d002      	beq.n	8000592 <EXTI0_1_IRQHandler+0x62>
				setSSD(6);
 800058c:	2006      	movs	r0, #6
 800058e:	f000 f935 	bl	80007fc <setSSD>
			}
	GPIOB->ODR ^= (1U << 5); //pb5
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 8000598:	2120      	movs	r1, #32
 800059a:	404a      	eors	r2, r1
 800059c:	615a      	str	r2, [r3, #20]


	GPIOB->ODR ^= (1U << 4); //pb4
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 80005a4:	2110      	movs	r1, #16
 80005a6:	404a      	eors	r2, r1
 80005a8:	615a      	str	r2, [r3, #20]
		if ((GPIOB -> IDR >>0)& 1){
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	d002      	beq.n	80005ba <EXTI0_1_IRQHandler+0x8a>
				setSSD(3);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f921 	bl	80007fc <setSSD>
			}
	GPIOB->ODR ^= (1U << 4); //pb4
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 80005bc:	695a      	ldr	r2, [r3, #20]
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <EXTI0_1_IRQHandler+0xac>)
 80005c0:	2110      	movs	r1, #16
 80005c2:	404a      	eors	r2, r1
 80005c4:	615a      	str	r2, [r3, #20]

	EXTI->RPR1 |= (1U << 0); //clear interrupt flag
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <EXTI0_1_IRQHandler+0xb0>)
 80005c8:	68da      	ldr	r2, [r3, #12]
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <EXTI0_1_IRQHandler+0xb0>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	60da      	str	r2, [r3, #12]
	set_Rows_Keypad();
 80005d2:	f000 fae5 	bl	8000ba0 <set_Rows_Keypad>

}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	50000400 	.word	0x50000400
 80005e0:	40021800 	.word	0x40021800

080005e4 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void){ //interrupt from PB2
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	clear_Rows_Keypad();
 80005e8:	f000 fab4 	bl	8000b54 <clear_Rows_Keypad>
	GPIOA->ODR ^= (1U << 8);
 80005ec:	23a0      	movs	r3, #160	; 0xa0
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	23a0      	movs	r3, #160	; 0xa0
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	0049      	lsls	r1, r1, #1
 80005fa:	404a      	eors	r2, r1
 80005fc:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR >>2) &1){
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	089b      	lsrs	r3, r3, #2
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	d002      	beq.n	8000610 <EXTI2_3_IRQHandler+0x2c>
		setSSD(0);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f8f6 	bl	80007fc <setSSD>
	}
	GPIOA->ODR ^= (1U << 8); //pa8
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	0049      	lsls	r1, r1, #1
 800061e:	404a      	eors	r2, r1
 8000620:	615a      	str	r2, [r3, #20]


	GPIOB->ODR ^= (1U << 9); //pb9
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0089      	lsls	r1, r1, #2
 800062c:	404a      	eors	r2, r1
 800062e:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR >>2) &1){
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000632:	691b      	ldr	r3, [r3, #16]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	d002      	beq.n	8000642 <EXTI2_3_IRQHandler+0x5e>
		setSSD(8);
 800063c:	2008      	movs	r0, #8
 800063e:	f000 f8dd 	bl	80007fc <setSSD>
	}
	GPIOB->ODR ^= (1U << 9); //pb9
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0089      	lsls	r1, r1, #2
 800064c:	404a      	eors	r2, r1
 800064e:	615a      	str	r2, [r3, #20]


	GPIOB->ODR ^= (1U << 5); //pb5
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000656:	2120      	movs	r1, #32
 8000658:	404a      	eors	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR >>2) &1){
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	089b      	lsrs	r3, r3, #2
 8000662:	2201      	movs	r2, #1
 8000664:	4013      	ands	r3, r2
 8000666:	d002      	beq.n	800066e <EXTI2_3_IRQHandler+0x8a>
		setSSD(5);
 8000668:	2005      	movs	r0, #5
 800066a:	f000 f8c7 	bl	80007fc <setSSD>
	}
	GPIOB->ODR ^= (1U << 5); //pb5
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000674:	2120      	movs	r1, #32
 8000676:	404a      	eors	r2, r1
 8000678:	615a      	str	r2, [r3, #20]


	GPIOB->ODR ^= (1U << 4); //pb4
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000680:	2110      	movs	r1, #16
 8000682:	404a      	eors	r2, r1
 8000684:	615a      	str	r2, [r3, #20]
	if((GPIOB->IDR >>2) &1){
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	089b      	lsrs	r3, r3, #2
 800068c:	2201      	movs	r2, #1
 800068e:	4013      	ands	r3, r2
 8000690:	d002      	beq.n	8000698 <EXTI2_3_IRQHandler+0xb4>
		setSSD(2);
 8000692:	2002      	movs	r0, #2
 8000694:	f000 f8b2 	bl	80007fc <setSSD>
	}
	GPIOB->ODR ^= (1U << 4); //pb4
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <EXTI2_3_IRQHandler+0xd8>)
 800069e:	2110      	movs	r1, #16
 80006a0:	404a      	eors	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]

	EXTI->RPR1 |= (1U << 2); //clear interrupt flag
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <EXTI2_3_IRQHandler+0xdc>)
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <EXTI2_3_IRQHandler+0xdc>)
 80006aa:	2104      	movs	r1, #4
 80006ac:	430a      	orrs	r2, r1
 80006ae:	60da      	str	r2, [r3, #12]
	set_Rows_Keypad();
 80006b0:	f000 fa76 	bl	8000ba0 <set_Rows_Keypad>
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	50000400 	.word	0x50000400
 80006c0:	40021800 	.word	0x40021800

080006c4 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void){ //pb8 and pa9
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

	if((GPIOB->IDR >>8) &1){
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	d04b      	beq.n	800076c <EXTI4_15_IRQHandler+0xa8>

		clear_Rows_Keypad();
 80006d4:	f000 fa3e 	bl	8000b54 <clear_Rows_Keypad>


		GPIOB->ODR ^= (1U << 9); //pb9
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 80006da:	695a      	ldr	r2, [r3, #20]
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	0089      	lsls	r1, r1, #2
 80006e2:	404a      	eors	r2, r1
 80006e4:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR >>8) &1){
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	2201      	movs	r2, #1
 80006ee:	4013      	ands	r3, r2
 80006f0:	d002      	beq.n	80006f8 <EXTI4_15_IRQHandler+0x34>
			setSSD(7);
 80006f2:	2007      	movs	r0, #7
 80006f4:	f000 f882 	bl	80007fc <setSSD>
		}
		GPIOB->ODR ^= (1U << 9); //pb9
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 80006fa:	695a      	ldr	r2, [r3, #20]
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	0089      	lsls	r1, r1, #2
 8000702:	404a      	eors	r2, r1
 8000704:	615a      	str	r2, [r3, #20]


		GPIOB->ODR ^= (1U << 5); //pb5
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 800070c:	2120      	movs	r1, #32
 800070e:	404a      	eors	r2, r1
 8000710:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR >>8) &1){
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	2201      	movs	r2, #1
 800071a:	4013      	ands	r3, r2
 800071c:	d002      	beq.n	8000724 <EXTI4_15_IRQHandler+0x60>
			setSSD(4);
 800071e:	2004      	movs	r0, #4
 8000720:	f000 f86c 	bl	80007fc <setSSD>
		}
		GPIOB->ODR ^= (1U << 5); //pb5
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 800072a:	2120      	movs	r1, #32
 800072c:	404a      	eors	r2, r1
 800072e:	615a      	str	r2, [r3, #20]


		GPIOB->ODR ^= (1U << 4); //pb4
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 8000736:	2110      	movs	r1, #16
 8000738:	404a      	eors	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
		if((GPIOB->IDR >>8) &1){
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	2201      	movs	r2, #1
 8000744:	4013      	ands	r3, r2
 8000746:	d002      	beq.n	800074e <EXTI4_15_IRQHandler+0x8a>
			setSSD(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f000 f857 	bl	80007fc <setSSD>
		}
		GPIOB->ODR ^= (1U << 4); //pb4
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <EXTI4_15_IRQHandler+0xb0>)
 8000754:	2110      	movs	r1, #16
 8000756:	404a      	eors	r2, r1
 8000758:	615a      	str	r2, [r3, #20]
		EXTI->RPR1 |= (1U << 8); //clear interrupt flag
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <EXTI4_15_IRQHandler+0xb4>)
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <EXTI4_15_IRQHandler+0xb4>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0049      	lsls	r1, r1, #1
 8000764:	430a      	orrs	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
		set_Rows_Keypad();
 8000768:	f000 fa1a 	bl	8000ba0 <set_Rows_Keypad>
	}

}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	50000400 	.word	0x50000400
 8000778:	40021800 	.word	0x40021800

0800077c <clearSSD>:

void clearSSD(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

	GPIOA -> ODR |= (1U << 0);  //PA0 A
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	2101      	movs	r1, #1
 800078c:	430a      	orrs	r2, r1
 800078e:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= (1U << 1);  //PA1 B
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	23a0      	movs	r3, #160	; 0xa0
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	2102      	movs	r1, #2
 800079c:	430a      	orrs	r2, r1
 800079e:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= (1U << 4);  //PA2 C
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	695a      	ldr	r2, [r3, #20]
 80007a6:	23a0      	movs	r3, #160	; 0xa0
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	2110      	movs	r1, #16
 80007ac:	430a      	orrs	r2, r1
 80007ae:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= (1U << 5);  //PA3 D
 80007b0:	23a0      	movs	r3, #160	; 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	23a0      	movs	r3, #160	; 0xa0
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2120      	movs	r1, #32
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= (1U << 12); //PA4 E
 80007c0:	23a0      	movs	r3, #160	; 0xa0
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	23a0      	movs	r3, #160	; 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	0149      	lsls	r1, r1, #5
 80007ce:	430a      	orrs	r2, r1
 80007d0:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= (1U << 11); //PA5 F
 80007d2:	23a0      	movs	r3, #160	; 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	23a0      	movs	r3, #160	; 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0109      	lsls	r1, r1, #4
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
	GPIOA -> ODR |= (1U << 6);  //PA6 G
 80007e4:	23a0      	movs	r3, #160	; 0xa0
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	695a      	ldr	r2, [r3, #20]
 80007ea:	23a0      	movs	r3, #160	; 0xa0
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	430a      	orrs	r2, r1
 80007f2:	615a      	str	r2, [r3, #20]
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <setSSD>:


void setSSD(int x){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	clearSSD();
 8000804:	f7ff ffba 	bl	800077c <clearSSD>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b09      	cmp	r3, #9
 800080c:	d900      	bls.n	8000810 <setSSD+0x14>
 800080e:	e197      	b.n	8000b40 <setSSD+0x344>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	009a      	lsls	r2, r3, #2
 8000814:	4bcc      	ldr	r3, [pc, #816]	; (8000b48 <setSSD+0x34c>)
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	469f      	mov	pc, r3
	switch(x){
		case 0:
			GPIOA -> ODR &= ~(1U << 0);  //PA0 A
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	23a0      	movs	r3, #160	; 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	2101      	movs	r1, #1
 8000828:	438a      	bics	r2, r1
 800082a:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 1);  //PA1 B
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	695a      	ldr	r2, [r3, #20]
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2102      	movs	r1, #2
 8000838:	438a      	bics	r2, r1
 800083a:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 800083c:	23a0      	movs	r3, #160	; 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	2110      	movs	r1, #16
 8000848:	438a      	bics	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 5);  //PA3 D
 800084c:	23a0      	movs	r3, #160	; 0xa0
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2120      	movs	r1, #32
 8000858:	438a      	bics	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 12); //PA4 E
 800085c:	23a0      	movs	r3, #160	; 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	23a0      	movs	r3, #160	; 0xa0
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	49b9      	ldr	r1, [pc, #740]	; (8000b4c <setSSD+0x350>)
 8000868:	400a      	ands	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 11); //PA5 F
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	695a      	ldr	r2, [r3, #20]
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	49b6      	ldr	r1, [pc, #728]	; (8000b50 <setSSD+0x354>)
 8000878:	400a      	ands	r2, r1
 800087a:	615a      	str	r2, [r3, #20]
			break;
 800087c:	e160      	b.n	8000b40 <setSSD+0x344>

		case 1:
			GPIOA -> ODR &= ~(1U << 1);  //PA1 B
 800087e:	23a0      	movs	r3, #160	; 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2102      	movs	r1, #2
 800088a:	438a      	bics	r2, r1
 800088c:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2110      	movs	r1, #16
 800089a:	438a      	bics	r2, r1
 800089c:	615a      	str	r2, [r3, #20]
			break;
 800089e:	e14f      	b.n	8000b40 <setSSD+0x344>

		case 2:
			GPIOA -> ODR &= ~(1U << 0);  //PA0 A
 80008a0:	23a0      	movs	r3, #160	; 0xa0
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	23a0      	movs	r3, #160	; 0xa0
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	2101      	movs	r1, #1
 80008ac:	438a      	bics	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 1);  //PA1 B
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2102      	movs	r1, #2
 80008bc:	438a      	bics	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 5);  //PA3 D
 80008c0:	23a0      	movs	r3, #160	; 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	23a0      	movs	r3, #160	; 0xa0
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2120      	movs	r1, #32
 80008cc:	438a      	bics	r2, r1
 80008ce:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 12); //PA4 E
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	23a0      	movs	r3, #160	; 0xa0
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	499c      	ldr	r1, [pc, #624]	; (8000b4c <setSSD+0x350>)
 80008dc:	400a      	ands	r2, r1
 80008de:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 6);  //PA6 G
 80008e0:	23a0      	movs	r3, #160	; 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	695a      	ldr	r2, [r3, #20]
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	438a      	bics	r2, r1
 80008ee:	615a      	str	r2, [r3, #20]
			break;
 80008f0:	e126      	b.n	8000b40 <setSSD+0x344>

		case 3:
			GPIOA -> ODR &= ~(1U << 0);  //PA0 A
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2101      	movs	r1, #1
 80008fe:	438a      	bics	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 1);  //PA1 B
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	23a0      	movs	r3, #160	; 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	2102      	movs	r1, #2
 800090e:	438a      	bics	r2, r1
 8000910:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	695a      	ldr	r2, [r3, #20]
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	2110      	movs	r1, #16
 800091e:	438a      	bics	r2, r1
 8000920:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 5);  //PA3 D
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	23a0      	movs	r3, #160	; 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2120      	movs	r1, #32
 800092e:	438a      	bics	r2, r1
 8000930:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 6);  //PA6 G
 8000932:	23a0      	movs	r3, #160	; 0xa0
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	438a      	bics	r2, r1
 8000940:	615a      	str	r2, [r3, #20]
			break;
 8000942:	e0fd      	b.n	8000b40 <setSSD+0x344>
		case 4:
			GPIOA -> ODR &= ~(1U << 1);  //PA1 B
 8000944:	23a0      	movs	r3, #160	; 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2102      	movs	r1, #2
 8000950:	438a      	bics	r2, r1
 8000952:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	695a      	ldr	r2, [r3, #20]
 800095a:	23a0      	movs	r3, #160	; 0xa0
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2110      	movs	r1, #16
 8000960:	438a      	bics	r2, r1
 8000962:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 11); //PA5 F
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	695a      	ldr	r2, [r3, #20]
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	4978      	ldr	r1, [pc, #480]	; (8000b50 <setSSD+0x354>)
 8000970:	400a      	ands	r2, r1
 8000972:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 6);  //PA6 G
 8000974:	23a0      	movs	r3, #160	; 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	438a      	bics	r2, r1
 8000982:	615a      	str	r2, [r3, #20]
			break;
 8000984:	e0dc      	b.n	8000b40 <setSSD+0x344>

		case 5:
			GPIOA -> ODR &= ~(1U << 0);  //PA0 A
 8000986:	23a0      	movs	r3, #160	; 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	23a0      	movs	r3, #160	; 0xa0
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	2101      	movs	r1, #1
 8000992:	438a      	bics	r2, r1
 8000994:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 8000996:	23a0      	movs	r3, #160	; 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	2110      	movs	r1, #16
 80009a2:	438a      	bics	r2, r1
 80009a4:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 5);  //PA3 D
 80009a6:	23a0      	movs	r3, #160	; 0xa0
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	23a0      	movs	r3, #160	; 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	2120      	movs	r1, #32
 80009b2:	438a      	bics	r2, r1
 80009b4:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 11); //PA5 F
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	695a      	ldr	r2, [r3, #20]
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	4963      	ldr	r1, [pc, #396]	; (8000b50 <setSSD+0x354>)
 80009c2:	400a      	ands	r2, r1
 80009c4:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 6);  //PA6 G
 80009c6:	23a0      	movs	r3, #160	; 0xa0
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	2140      	movs	r1, #64	; 0x40
 80009d2:	438a      	bics	r2, r1
 80009d4:	615a      	str	r2, [r3, #20]
			break;
 80009d6:	e0b3      	b.n	8000b40 <setSSD+0x344>

		case 6:
			GPIOA -> ODR &= ~(1U << 0);  //PA0 A
 80009d8:	23a0      	movs	r3, #160	; 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	2101      	movs	r1, #1
 80009e4:	438a      	bics	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	695a      	ldr	r2, [r3, #20]
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2110      	movs	r1, #16
 80009f4:	438a      	bics	r2, r1
 80009f6:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 5);  //PA3 D
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2120      	movs	r1, #32
 8000a04:	438a      	bics	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 12); //PA4 E
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	494e      	ldr	r1, [pc, #312]	; (8000b4c <setSSD+0x350>)
 8000a14:	400a      	ands	r2, r1
 8000a16:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 11); //PA5 F
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	23a0      	movs	r3, #160	; 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	494b      	ldr	r1, [pc, #300]	; (8000b50 <setSSD+0x354>)
 8000a24:	400a      	ands	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 6);  //PA6 G
 8000a28:	23a0      	movs	r3, #160	; 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	695a      	ldr	r2, [r3, #20]
 8000a2e:	23a0      	movs	r3, #160	; 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	438a      	bics	r2, r1
 8000a36:	615a      	str	r2, [r3, #20]
			break;
 8000a38:	e082      	b.n	8000b40 <setSSD+0x344>

		case 7:
			GPIOA -> ODR &= ~(1U << 0);  //PA0 A
 8000a3a:	23a0      	movs	r3, #160	; 0xa0
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	23a0      	movs	r3, #160	; 0xa0
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	2101      	movs	r1, #1
 8000a46:	438a      	bics	r2, r1
 8000a48:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 1);  //PA1 B
 8000a4a:	23a0      	movs	r3, #160	; 0xa0
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	2102      	movs	r1, #2
 8000a56:	438a      	bics	r2, r1
 8000a58:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 8000a5a:	23a0      	movs	r3, #160	; 0xa0
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	695a      	ldr	r2, [r3, #20]
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	2110      	movs	r1, #16
 8000a66:	438a      	bics	r2, r1
 8000a68:	615a      	str	r2, [r3, #20]
			break;
 8000a6a:	e069      	b.n	8000b40 <setSSD+0x344>

		case 8:
			GPIOA -> ODR &= ~(1U << 0);  //PA0 A
 8000a6c:	23a0      	movs	r3, #160	; 0xa0
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	695a      	ldr	r2, [r3, #20]
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	2101      	movs	r1, #1
 8000a78:	438a      	bics	r2, r1
 8000a7a:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 1);  //PA1 B
 8000a7c:	23a0      	movs	r3, #160	; 0xa0
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	695a      	ldr	r2, [r3, #20]
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2102      	movs	r1, #2
 8000a88:	438a      	bics	r2, r1
 8000a8a:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 8000a8c:	23a0      	movs	r3, #160	; 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	23a0      	movs	r3, #160	; 0xa0
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	2110      	movs	r1, #16
 8000a98:	438a      	bics	r2, r1
 8000a9a:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 5);  //PA3 D
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	695a      	ldr	r2, [r3, #20]
 8000aa2:	23a0      	movs	r3, #160	; 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	438a      	bics	r2, r1
 8000aaa:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 12); //PA4 E
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	695a      	ldr	r2, [r3, #20]
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	4925      	ldr	r1, [pc, #148]	; (8000b4c <setSSD+0x350>)
 8000ab8:	400a      	ands	r2, r1
 8000aba:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 11); //PA5 F
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	695a      	ldr	r2, [r3, #20]
 8000ac2:	23a0      	movs	r3, #160	; 0xa0
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	4922      	ldr	r1, [pc, #136]	; (8000b50 <setSSD+0x354>)
 8000ac8:	400a      	ands	r2, r1
 8000aca:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 6);  //PA6 G
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	23a0      	movs	r3, #160	; 0xa0
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	2140      	movs	r1, #64	; 0x40
 8000ad8:	438a      	bics	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
			break;
 8000adc:	e030      	b.n	8000b40 <setSSD+0x344>

		case 9:
			GPIOA -> ODR &= ~(1U << 0);  //PA0 A
 8000ade:	23a0      	movs	r3, #160	; 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	695a      	ldr	r2, [r3, #20]
 8000ae4:	23a0      	movs	r3, #160	; 0xa0
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	2101      	movs	r1, #1
 8000aea:	438a      	bics	r2, r1
 8000aec:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 1);  //PA1 B
 8000aee:	23a0      	movs	r3, #160	; 0xa0
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	23a0      	movs	r3, #160	; 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	2102      	movs	r1, #2
 8000afa:	438a      	bics	r2, r1
 8000afc:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 4);  //PA2 C
 8000afe:	23a0      	movs	r3, #160	; 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2110      	movs	r1, #16
 8000b0a:	438a      	bics	r2, r1
 8000b0c:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 5);  //PA3 D
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	695a      	ldr	r2, [r3, #20]
 8000b14:	23a0      	movs	r3, #160	; 0xa0
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	2120      	movs	r1, #32
 8000b1a:	438a      	bics	r2, r1
 8000b1c:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 11); //PA5 F
 8000b1e:	23a0      	movs	r3, #160	; 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	23a0      	movs	r3, #160	; 0xa0
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	4909      	ldr	r1, [pc, #36]	; (8000b50 <setSSD+0x354>)
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	615a      	str	r2, [r3, #20]
			GPIOA -> ODR &= ~(1U << 6);  //PA6 G
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	438a      	bics	r2, r1
 8000b3c:	615a      	str	r2, [r3, #20]
            break;
 8000b3e:	46c0      	nop			; (mov r8, r8)

	}
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08000d04 	.word	0x08000d04
 8000b4c:	ffffefff 	.word	0xffffefff
 8000b50:	fffff7ff 	.word	0xfffff7ff

08000b54 <clear_Rows_Keypad>:

void clear_Rows_Keypad(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	GPIOA -> ODR &= ~(1U << 8);  //PA8
 8000b58:	23a0      	movs	r3, #160	; 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <clear_Rows_Keypad+0x40>)
 8000b64:	400a      	ands	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~(1U << 9);  //PB9
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <clear_Rows_Keypad+0x44>)
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <clear_Rows_Keypad+0x44>)
 8000b6e:	490b      	ldr	r1, [pc, #44]	; (8000b9c <clear_Rows_Keypad+0x48>)
 8000b70:	400a      	ands	r2, r1
 8000b72:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~(1U << 5);  //PB5
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <clear_Rows_Keypad+0x44>)
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <clear_Rows_Keypad+0x44>)
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR &= ~(1U << 4);  //PB4
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <clear_Rows_Keypad+0x44>)
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <clear_Rows_Keypad+0x44>)
 8000b86:	2110      	movs	r1, #16
 8000b88:	438a      	bics	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	fffffeff 	.word	0xfffffeff
 8000b98:	50000400 	.word	0x50000400
 8000b9c:	fffffdff 	.word	0xfffffdff

08000ba0 <set_Rows_Keypad>:

void set_Rows_Keypad(void){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	GPIOA -> ODR |= (1U << 8);  //PA8
 8000ba4:	23a0      	movs	r3, #160	; 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	23a0      	movs	r3, #160	; 0xa0
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	0049      	lsls	r1, r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 9);  //PB9
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <set_Rows_Keypad+0x44>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <set_Rows_Keypad+0x44>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0089      	lsls	r1, r1, #2
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 5);  //PB5
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <set_Rows_Keypad+0x44>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <set_Rows_Keypad+0x44>)
 8000bca:	2120      	movs	r1, #32
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	615a      	str	r2, [r3, #20]
	GPIOB -> ODR |= (1U << 4);  //PB4
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <set_Rows_Keypad+0x44>)
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <set_Rows_Keypad+0x44>)
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	615a      	str	r2, [r3, #20]
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	50000400 	.word	0x50000400

08000be8 <main>:

int main(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

		keypad_setup();
 8000bec:	f7ff fb12 	bl	8000214 <keypad_setup>

    while(1) {
 8000bf0:	e7fe      	b.n	8000bf0 <main+0x8>

08000bf2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <HardFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 f833 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c30:	f7ff fff6 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <LoopForever+0xe>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <LoopForever+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c5a:	f000 f823 	bl	8000ca4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c5e:	f7ff ffc3 	bl	8000be8 <main>

08000c62 <LoopForever>:

LoopForever:
  b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   r0, =_estack
 8000c64:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c70:	08000d34 	.word	0x08000d34
  ldr r2, =_sbss
 8000c74:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c78:	20000024 	.word	0x20000024

08000c7c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_IRQHandler>
	...

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	18d2      	adds	r2, r2, r3
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000020 	.word	0x20000020

08000ca4 <__libc_init_array>:
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	2600      	movs	r6, #0
 8000ca8:	4d0c      	ldr	r5, [pc, #48]	; (8000cdc <__libc_init_array+0x38>)
 8000caa:	4c0d      	ldr	r4, [pc, #52]	; (8000ce0 <__libc_init_array+0x3c>)
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	10a4      	asrs	r4, r4, #2
 8000cb0:	42a6      	cmp	r6, r4
 8000cb2:	d109      	bne.n	8000cc8 <__libc_init_array+0x24>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	f000 f819 	bl	8000cec <_init>
 8000cba:	4d0a      	ldr	r5, [pc, #40]	; (8000ce4 <__libc_init_array+0x40>)
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	; (8000ce8 <__libc_init_array+0x44>)
 8000cbe:	1b64      	subs	r4, r4, r5
 8000cc0:	10a4      	asrs	r4, r4, #2
 8000cc2:	42a6      	cmp	r6, r4
 8000cc4:	d105      	bne.n	8000cd2 <__libc_init_array+0x2e>
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}
 8000cc8:	00b3      	lsls	r3, r6, #2
 8000cca:	58eb      	ldr	r3, [r5, r3]
 8000ccc:	4798      	blx	r3
 8000cce:	3601      	adds	r6, #1
 8000cd0:	e7ee      	b.n	8000cb0 <__libc_init_array+0xc>
 8000cd2:	00b3      	lsls	r3, r6, #2
 8000cd4:	58eb      	ldr	r3, [r5, r3]
 8000cd6:	4798      	blx	r3
 8000cd8:	3601      	adds	r6, #1
 8000cda:	e7f2      	b.n	8000cc2 <__libc_init_array+0x1e>
 8000cdc:	08000d2c 	.word	0x08000d2c
 8000ce0:	08000d2c 	.word	0x08000d2c
 8000ce4:	08000d2c 	.word	0x08000d2c
 8000ce8:	08000d30 	.word	0x08000d30

08000cec <_init>:
 8000cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cf2:	bc08      	pop	{r3}
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	4770      	bx	lr

08000cf8 <_fini>:
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cfe:	bc08      	pop	{r3}
 8000d00:	469e      	mov	lr, r3
 8000d02:	4770      	bx	lr
