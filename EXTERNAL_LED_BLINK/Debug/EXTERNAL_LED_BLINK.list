
EXTERNAL_LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002bc  080002bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002bc  080002bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002bc  080002bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002bc  080002bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002bc  080002bc  000102bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c0  080002c0  000102c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002c4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080002c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080002c8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016c0  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000648  00000000  00000000  000216ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00021d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00021f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013336  00000000  00000000  000220b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fe7  00000000  00000000  000353e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cd6c  00000000  00000000  000373cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b4139  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000055c  00000000  00000000  000b418c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080002a4 	.word	0x080002a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080002a4 	.word	0x080002a4

08000104 <main>:

#define LEDDELAY    1600000

void delay(volatile uint32_t);

int main(void) {
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0

    /* Enable GPIOA clock */
    RCC -> IOPENR |= (1U<<0);
 8000108:	4b1d      	ldr	r3, [pc, #116]	; (8000180 <main+0x7c>)
 800010a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800010c:	4b1c      	ldr	r3, [pc, #112]	; (8000180 <main+0x7c>)
 800010e:	2101      	movs	r1, #1
 8000110:	430a      	orrs	r2, r1
 8000112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Setup PA6 as output */


    GPIOA->MODER &= ~(3U << 2*6);
 8000114:	23a0      	movs	r3, #160	; 0xa0
 8000116:	05db      	lsls	r3, r3, #23
 8000118:	681a      	ldr	r2, [r3, #0]
 800011a:	23a0      	movs	r3, #160	; 0xa0
 800011c:	05db      	lsls	r3, r3, #23
 800011e:	4919      	ldr	r1, [pc, #100]	; (8000184 <main+0x80>)
 8000120:	400a      	ands	r2, r1
 8000122:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (1U << 2*6);
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	23a0      	movs	r3, #160	; 0xa0
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	2180      	movs	r1, #128	; 0x80
 8000130:	0149      	lsls	r1, r1, #5
 8000132:	430a      	orrs	r2, r1
 8000134:	601a      	str	r2, [r3, #0]

    /* Turn on LED */
    GPIOA->ODR |= (1U << 6);
 8000136:	23a0      	movs	r3, #160	; 0xa0
 8000138:	05db      	lsls	r3, r3, #23
 800013a:	695a      	ldr	r2, [r3, #20]
 800013c:	23a0      	movs	r3, #160	; 0xa0
 800013e:	05db      	lsls	r3, r3, #23
 8000140:	2140      	movs	r1, #64	; 0x40
 8000142:	430a      	orrs	r2, r1
 8000144:	615a      	str	r2, [r3, #20]
    GPIOA->ODR |= (1U << 7);
 8000146:	23a0      	movs	r3, #160	; 0xa0
 8000148:	05db      	lsls	r3, r3, #23
 800014a:	695a      	ldr	r2, [r3, #20]
 800014c:	23a0      	movs	r3, #160	; 0xa0
 800014e:	05db      	lsls	r3, r3, #23
 8000150:	2180      	movs	r1, #128	; 0x80
 8000152:	430a      	orrs	r2, r1
 8000154:	615a      	str	r2, [r3, #20]


    while(1) {
        delay(LEDDELAY);
 8000156:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <main+0x84>)
 8000158:	0018      	movs	r0, r3
 800015a:	f000 f817 	bl	800018c <delay>
        /* Toggle LED */
        GPIOA ->ODR ^=(1U << 6);
 800015e:	23a0      	movs	r3, #160	; 0xa0
 8000160:	05db      	lsls	r3, r3, #23
 8000162:	695a      	ldr	r2, [r3, #20]
 8000164:	23a0      	movs	r3, #160	; 0xa0
 8000166:	05db      	lsls	r3, r3, #23
 8000168:	2140      	movs	r1, #64	; 0x40
 800016a:	404a      	eors	r2, r1
 800016c:	615a      	str	r2, [r3, #20]
        GPIOA ->ODR ^=(1U << 7);
 800016e:	23a0      	movs	r3, #160	; 0xa0
 8000170:	05db      	lsls	r3, r3, #23
 8000172:	695a      	ldr	r2, [r3, #20]
 8000174:	23a0      	movs	r3, #160	; 0xa0
 8000176:	05db      	lsls	r3, r3, #23
 8000178:	2180      	movs	r1, #128	; 0x80
 800017a:	404a      	eors	r2, r1
 800017c:	615a      	str	r2, [r3, #20]
        delay(LEDDELAY);
 800017e:	e7ea      	b.n	8000156 <main+0x52>
 8000180:	40021000 	.word	0x40021000
 8000184:	ffffcfff 	.word	0xffffcfff
 8000188:	00186a00 	.word	0x00186a00

0800018c <delay>:
    }

    return 0;
}

void delay(volatile uint32_t s) {
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
    for(; s>0; s--);
 8000194:	e002      	b.n	800019c <delay+0x10>
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	3b01      	subs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d1f9      	bne.n	8000196 <delay+0xa>
}
 80001a2:	46c0      	nop			; (mov r8, r8)
 80001a4:	46c0      	nop			; (mov r8, r8)
 80001a6:	46bd      	mov	sp, r7
 80001a8:	b002      	add	sp, #8
 80001aa:	bd80      	pop	{r7, pc}

080001ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001b0:	e7fe      	b.n	80001b0 <NMI_Handler+0x4>

080001b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001b6:	e7fe      	b.n	80001b6 <HardFault_Handler+0x4>

080001b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80001bc:	46c0      	nop			; (mov r8, r8)
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}

080001c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001c2:	b580      	push	{r7, lr}
 80001c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001c6:	46c0      	nop			; (mov r8, r8)
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}

080001cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001d0:	f000 f832 	bl	8000238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001d4:	46c0      	nop			; (mov r8, r8)
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}

080001da <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001de:	46c0      	nop			; (mov r8, r8)
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001e4:	480d      	ldr	r0, [pc, #52]	; (800021c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80001e8:	f7ff fff7 	bl	80001da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001ec:	480c      	ldr	r0, [pc, #48]	; (8000220 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ee:	490d      	ldr	r1, [pc, #52]	; (8000224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f0:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <LoopForever+0xe>)
  movs r3, #0
 80001f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f4:	e002      	b.n	80001fc <LoopCopyDataInit>

080001f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001fa:	3304      	adds	r3, #4

080001fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000200:	d3f9      	bcc.n	80001f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000202:	4a0a      	ldr	r2, [pc, #40]	; (800022c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000204:	4c0a      	ldr	r4, [pc, #40]	; (8000230 <LoopForever+0x16>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000208:	e001      	b.n	800020e <LoopFillZerobss>

0800020a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800020a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800020c:	3204      	adds	r2, #4

0800020e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800020e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000210:	d3fb      	bcc.n	800020a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000212:	f000 f823 	bl	800025c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000216:	f7ff ff75 	bl	8000104 <main>

0800021a <LoopForever>:

LoopForever:
  b LoopForever
 800021a:	e7fe      	b.n	800021a <LoopForever>
  ldr   r0, =_estack
 800021c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000224:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000228:	080002c4 	.word	0x080002c4
  ldr r2, =_sbss
 800022c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000230:	20000024 	.word	0x20000024

08000234 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000234:	e7fe      	b.n	8000234 <ADC1_IRQHandler>
	...

08000238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <HAL_IncTick+0x1c>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	001a      	movs	r2, r3
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <HAL_IncTick+0x20>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	18d2      	adds	r2, r2, r3
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <HAL_IncTick+0x20>)
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	20000000 	.word	0x20000000
 8000258:	20000020 	.word	0x20000020

0800025c <__libc_init_array>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	2600      	movs	r6, #0
 8000260:	4d0c      	ldr	r5, [pc, #48]	; (8000294 <__libc_init_array+0x38>)
 8000262:	4c0d      	ldr	r4, [pc, #52]	; (8000298 <__libc_init_array+0x3c>)
 8000264:	1b64      	subs	r4, r4, r5
 8000266:	10a4      	asrs	r4, r4, #2
 8000268:	42a6      	cmp	r6, r4
 800026a:	d109      	bne.n	8000280 <__libc_init_array+0x24>
 800026c:	2600      	movs	r6, #0
 800026e:	f000 f819 	bl	80002a4 <_init>
 8000272:	4d0a      	ldr	r5, [pc, #40]	; (800029c <__libc_init_array+0x40>)
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <__libc_init_array+0x44>)
 8000276:	1b64      	subs	r4, r4, r5
 8000278:	10a4      	asrs	r4, r4, #2
 800027a:	42a6      	cmp	r6, r4
 800027c:	d105      	bne.n	800028a <__libc_init_array+0x2e>
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	00b3      	lsls	r3, r6, #2
 8000282:	58eb      	ldr	r3, [r5, r3]
 8000284:	4798      	blx	r3
 8000286:	3601      	adds	r6, #1
 8000288:	e7ee      	b.n	8000268 <__libc_init_array+0xc>
 800028a:	00b3      	lsls	r3, r6, #2
 800028c:	58eb      	ldr	r3, [r5, r3]
 800028e:	4798      	blx	r3
 8000290:	3601      	adds	r6, #1
 8000292:	e7f2      	b.n	800027a <__libc_init_array+0x1e>
 8000294:	080002bc 	.word	0x080002bc
 8000298:	080002bc 	.word	0x080002bc
 800029c:	080002bc 	.word	0x080002bc
 80002a0:	080002c0 	.word	0x080002c0

080002a4 <_init>:
 80002a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002aa:	bc08      	pop	{r3}
 80002ac:	469e      	mov	lr, r3
 80002ae:	4770      	bx	lr

080002b0 <_fini>:
 80002b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b6:	bc08      	pop	{r3}
 80002b8:	469e      	mov	lr, r3
 80002ba:	4770      	bx	lr
