
PR2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d90  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08001e4c  08001e4c  00011e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fb4  08001fb4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fb4  08001fb4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fb4  08001fb4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fb4  08001fb4  00011fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fb8  08001fb8  00011fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000006c  08002028  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002028  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000402d  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c9f  00000000  00000000  000240c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00024d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000380  00000000  00000000  00025148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140f1  00000000  00000000  000254c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ed6  00000000  00000000  000395b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080adf  00000000  00000000  0003d48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bdf6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e30  00000000  00000000  000bdfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001e34 	.word	0x08001e34

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08001e34 	.word	0x08001e34

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000138:	b590      	push	{r4, r7, lr}
 800013a:	b083      	sub	sp, #12
 800013c:	af00      	add	r7, sp, #0
 800013e:	0002      	movs	r2, r0
 8000140:	6039      	str	r1, [r7, #0]
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	781b      	ldrb	r3, [r3, #0]
 800014a:	2b7f      	cmp	r3, #127	; 0x7f
 800014c:	d828      	bhi.n	80001a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800014e:	4a2f      	ldr	r2, [pc, #188]	; (800020c <__NVIC_SetPriority+0xd4>)
 8000150:	1dfb      	adds	r3, r7, #7
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b25b      	sxtb	r3, r3
 8000156:	089b      	lsrs	r3, r3, #2
 8000158:	33c0      	adds	r3, #192	; 0xc0
 800015a:	009b      	lsls	r3, r3, #2
 800015c:	589b      	ldr	r3, [r3, r2]
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	7812      	ldrb	r2, [r2, #0]
 8000162:	0011      	movs	r1, r2
 8000164:	2203      	movs	r2, #3
 8000166:	400a      	ands	r2, r1
 8000168:	00d2      	lsls	r2, r2, #3
 800016a:	21ff      	movs	r1, #255	; 0xff
 800016c:	4091      	lsls	r1, r2
 800016e:	000a      	movs	r2, r1
 8000170:	43d2      	mvns	r2, r2
 8000172:	401a      	ands	r2, r3
 8000174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	019b      	lsls	r3, r3, #6
 800017a:	22ff      	movs	r2, #255	; 0xff
 800017c:	401a      	ands	r2, r3
 800017e:	1dfb      	adds	r3, r7, #7
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	0018      	movs	r0, r3
 8000184:	2303      	movs	r3, #3
 8000186:	4003      	ands	r3, r0
 8000188:	00db      	lsls	r3, r3, #3
 800018a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800018c:	481f      	ldr	r0, [pc, #124]	; (800020c <__NVIC_SetPriority+0xd4>)
 800018e:	1dfb      	adds	r3, r7, #7
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	b25b      	sxtb	r3, r3
 8000194:	089b      	lsrs	r3, r3, #2
 8000196:	430a      	orrs	r2, r1
 8000198:	33c0      	adds	r3, #192	; 0xc0
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800019e:	e031      	b.n	8000204 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	0019      	movs	r1, r3
 80001a8:	230f      	movs	r3, #15
 80001aa:	400b      	ands	r3, r1
 80001ac:	3b08      	subs	r3, #8
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	3306      	adds	r3, #6
 80001b2:	009b      	lsls	r3, r3, #2
 80001b4:	18d3      	adds	r3, r2, r3
 80001b6:	3304      	adds	r3, #4
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	1dfa      	adds	r2, r7, #7
 80001bc:	7812      	ldrb	r2, [r2, #0]
 80001be:	0011      	movs	r1, r2
 80001c0:	2203      	movs	r2, #3
 80001c2:	400a      	ands	r2, r1
 80001c4:	00d2      	lsls	r2, r2, #3
 80001c6:	21ff      	movs	r1, #255	; 0xff
 80001c8:	4091      	lsls	r1, r2
 80001ca:	000a      	movs	r2, r1
 80001cc:	43d2      	mvns	r2, r2
 80001ce:	401a      	ands	r2, r3
 80001d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	019b      	lsls	r3, r3, #6
 80001d6:	22ff      	movs	r2, #255	; 0xff
 80001d8:	401a      	ands	r2, r3
 80001da:	1dfb      	adds	r3, r7, #7
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	0018      	movs	r0, r3
 80001e0:	2303      	movs	r3, #3
 80001e2:	4003      	ands	r3, r0
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <__NVIC_SetPriority+0xd8>)
 80001ea:	1dfb      	adds	r3, r7, #7
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	001c      	movs	r4, r3
 80001f0:	230f      	movs	r3, #15
 80001f2:	4023      	ands	r3, r4
 80001f4:	3b08      	subs	r3, #8
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	3306      	adds	r3, #6
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	18c3      	adds	r3, r0, r3
 8000200:	3304      	adds	r3, #4
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	46c0      	nop			; (mov r8, r8)
 8000206:	46bd      	mov	sp, r7
 8000208:	b003      	add	sp, #12
 800020a:	bd90      	pop	{r4, r7, pc}
 800020c:	e000e100 	.word	0xe000e100
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <INIT_EEPROM_512>:

#include "lc512driver.h"

//Initializing EEPROM
void INIT_EEPROM_512()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	//PB8-PB9 pins will activate
	//alternate function 6

	//PB8 as AF6
	GPIOB->MODER &= ~(3U << 2*8);
 8000218:	4b3f      	ldr	r3, [pc, #252]	; (8000318 <INIT_EEPROM_512+0x104>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b3e      	ldr	r3, [pc, #248]	; (8000318 <INIT_EEPROM_512+0x104>)
 800021e:	493f      	ldr	r1, [pc, #252]	; (800031c <INIT_EEPROM_512+0x108>)
 8000220:	400a      	ands	r2, r1
 8000222:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2U << 2*8);
 8000224:	4b3c      	ldr	r3, [pc, #240]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b3b      	ldr	r3, [pc, #236]	; (8000318 <INIT_EEPROM_512+0x104>)
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	0289      	lsls	r1, r1, #10
 800022e:	430a      	orrs	r2, r1
 8000230:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER|= (1U << 8);
 8000232:	4b39      	ldr	r3, [pc, #228]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000234:	685a      	ldr	r2, [r3, #4]
 8000236:	4b38      	ldr	r3, [pc, #224]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	0049      	lsls	r1, r1, #1
 800023c:	430a      	orrs	r2, r1
 800023e:	605a      	str	r2, [r3, #4]

	//choose AF from mux
	GPIOB->AFR[1] &= ~(0xFU << 4*0);
 8000240:	4b35      	ldr	r3, [pc, #212]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000244:	4b34      	ldr	r3, [pc, #208]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000246:	210f      	movs	r1, #15
 8000248:	438a      	bics	r2, r1
 800024a:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |= (6 << 4*0);
 800024c:	4b32      	ldr	r3, [pc, #200]	; (8000318 <INIT_EEPROM_512+0x104>)
 800024e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000250:	4b31      	ldr	r3, [pc, #196]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000252:	2106      	movs	r1, #6
 8000254:	430a      	orrs	r2, r1
 8000256:	625a      	str	r2, [r3, #36]	; 0x24


	//PB9 as AF6
	GPIOB->MODER &= ~(3U << 2*9);
 8000258:	4b2f      	ldr	r3, [pc, #188]	; (8000318 <INIT_EEPROM_512+0x104>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b2e      	ldr	r3, [pc, #184]	; (8000318 <INIT_EEPROM_512+0x104>)
 800025e:	4930      	ldr	r1, [pc, #192]	; (8000320 <INIT_EEPROM_512+0x10c>)
 8000260:	400a      	ands	r2, r1
 8000262:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2U << 2*9);
 8000264:	4b2c      	ldr	r3, [pc, #176]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b2b      	ldr	r3, [pc, #172]	; (8000318 <INIT_EEPROM_512+0x104>)
 800026a:	2180      	movs	r1, #128	; 0x80
 800026c:	0309      	lsls	r1, r1, #12
 800026e:	430a      	orrs	r2, r1
 8000270:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER|= (1U << 9);
 8000272:	4b29      	ldr	r3, [pc, #164]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000274:	685a      	ldr	r2, [r3, #4]
 8000276:	4b28      	ldr	r3, [pc, #160]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	0089      	lsls	r1, r1, #2
 800027c:	430a      	orrs	r2, r1
 800027e:	605a      	str	r2, [r3, #4]

	//choose AF from mux
	GPIOB->AFR[1] &= ~(0xFU << 4*1);
 8000280:	4b25      	ldr	r3, [pc, #148]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000284:	4b24      	ldr	r3, [pc, #144]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000286:	21f0      	movs	r1, #240	; 0xf0
 8000288:	438a      	bics	r2, r1
 800028a:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |= (6 << 4*1);
 800028c:	4b22      	ldr	r3, [pc, #136]	; (8000318 <INIT_EEPROM_512+0x104>)
 800028e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <INIT_EEPROM_512+0x104>)
 8000292:	2160      	movs	r1, #96	; 0x60
 8000294:	430a      	orrs	r2, r1
 8000296:	625a      	str	r2, [r3, #36]	; 0x24

	//enable I2C1
	RCC->APBENR1 |= (1U << 21);
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <INIT_EEPROM_512+0x110>)
 800029a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800029c:	4b21      	ldr	r3, [pc, #132]	; (8000324 <INIT_EEPROM_512+0x110>)
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	0389      	lsls	r1, r1, #14
 80002a2:	430a      	orrs	r2, r1
 80002a4:	63da      	str	r2, [r3, #60]	; 0x3c

	I2C1->CR1 = 0;
 80002a6:	4b20      	ldr	r3, [pc, #128]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
	I2C1->CR1 |= (1 << 7);//ERR1, error interrupt
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	430a      	orrs	r2, r1
 80002b6:	601a      	str	r2, [r3, #0]


	//TIMING REGISTERS FOR STANDART MODE
	I2C1->TIMINGR |= (3 << 28);//PRESC
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002ba:	691a      	ldr	r2, [r3, #16]
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002be:	21c0      	movs	r1, #192	; 0xc0
 80002c0:	0589      	lsls	r1, r1, #22
 80002c2:	430a      	orrs	r2, r1
 80002c4:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x13 << 0);//SCLL
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002c8:	691a      	ldr	r2, [r3, #16]
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002cc:	2113      	movs	r1, #19
 80002ce:	430a      	orrs	r2, r1
 80002d0:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0xF << 8);//SCLR
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002d4:	691a      	ldr	r2, [r3, #16]
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002d8:	21f0      	movs	r1, #240	; 0xf0
 80002da:	0109      	lsls	r1, r1, #4
 80002dc:	430a      	orrs	r2, r1
 80002de:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x2 << 16);//SDADEL
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002e2:	691a      	ldr	r2, [r3, #16]
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002e6:	2180      	movs	r1, #128	; 0x80
 80002e8:	0289      	lsls	r1, r1, #10
 80002ea:	430a      	orrs	r2, r1
 80002ec:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x4 << 20);//SCLDEL
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002f0:	691a      	ldr	r2, [r3, #16]
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002f4:	2180      	movs	r1, #128	; 0x80
 80002f6:	03c9      	lsls	r1, r1, #15
 80002f8:	430a      	orrs	r2, r1
 80002fa:	611a      	str	r2, [r3, #16]

	I2C1->CR1 = (1U << 0);//PE=0
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <INIT_EEPROM_512+0x114>)
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(I2C1_IRQn,0);
 8000302:	2100      	movs	r1, #0
 8000304:	2017      	movs	r0, #23
 8000306:	f7ff ff17 	bl	8000138 <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_IRQn);
 800030a:	2017      	movs	r0, #23
 800030c:	f7ff fefa 	bl	8000104 <__NVIC_EnableIRQ>
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	50000400 	.word	0x50000400
 800031c:	fffcffff 	.word	0xfffcffff
 8000320:	fff3ffff 	.word	0xfff3ffff
 8000324:	40021000 	.word	0x40021000
 8000328:	40005400 	.word	0x40005400

0800032c <WriteMultipleByte>:
	I2C1->TXDR = (uint32_t)data;//transmit data register
}

//Writing 128 bytes
void WriteMultipleByte(uint8_t devAddr, uint16_t startAddr, uint8_t* data, uint8_t size)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	0004      	movs	r4, r0
 8000334:	0008      	movs	r0, r1
 8000336:	603a      	str	r2, [r7, #0]
 8000338:	0019      	movs	r1, r3
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	1c22      	adds	r2, r4, #0
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	1c02      	adds	r2, r0, #0
 8000344:	801a      	strh	r2, [r3, #0]
 8000346:	1dbb      	adds	r3, r7, #6
 8000348:	1c0a      	adds	r2, r1, #0
 800034a:	701a      	strb	r2, [r3, #0]
	//Avoid writing more than 128 byte and less than 0 byte
	if(size > 128 && size <= 0)
 800034c:	1dbb      	adds	r3, r7, #6
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b80      	cmp	r3, #128	; 0x80
 8000352:	d903      	bls.n	800035c <WriteMultipleByte+0x30>
 8000354:	1dbb      	adds	r3, r7, #6
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d05a      	beq.n	8000412 <WriteMultipleByte+0xe6>
	{
		return;
	}
	//Data sheet pattern applied
	//Write operation
	I2C1->CR2=0;
 800035c:	4b2f      	ldr	r3, [pc, #188]	; (800041c <WriteMultipleByte+0xf0>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
	//Slave address
	I2C1->CR2 |= ((uint32_t)(devAddr << 1));
 8000362:	4b2e      	ldr	r3, [pc, #184]	; (800041c <WriteMultipleByte+0xf0>)
 8000364:	685a      	ldr	r2, [r3, #4]
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	0019      	movs	r1, r3
 800036e:	4b2b      	ldr	r3, [pc, #172]	; (800041c <WriteMultipleByte+0xf0>)
 8000370:	430a      	orrs	r2, r1
 8000372:	605a      	str	r2, [r3, #4]
	//Number of bytes that will send
	I2C1->CR2 |= ((uint32_t)(2U + size) << 16);
 8000374:	4b29      	ldr	r3, [pc, #164]	; (800041c <WriteMultipleByte+0xf0>)
 8000376:	6859      	ldr	r1, [r3, #4]
 8000378:	1dbb      	adds	r3, r7, #6
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	3302      	adds	r3, #2
 800037e:	041a      	lsls	r2, r3, #16
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <WriteMultipleByte+0xf0>)
 8000382:	430a      	orrs	r2, r1
 8000384:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 25);//AUTOEND
 8000386:	4b25      	ldr	r3, [pc, #148]	; (800041c <WriteMultipleByte+0xf0>)
 8000388:	685a      	ldr	r2, [r3, #4]
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <WriteMultipleByte+0xf0>)
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	0489      	lsls	r1, r1, #18
 8000390:	430a      	orrs	r2, r1
 8000392:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 13);//Start condition
 8000394:	4b21      	ldr	r3, [pc, #132]	; (800041c <WriteMultipleByte+0xf0>)
 8000396:	685a      	ldr	r2, [r3, #4]
 8000398:	4b20      	ldr	r3, [pc, #128]	; (800041c <WriteMultipleByte+0xf0>)
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	430a      	orrs	r2, r1
 80003a0:	605a      	str	r2, [r3, #4]


	while(!(I2C1->ISR & (1 << 1)));//TXIS
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <WriteMultipleByte+0xf0>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	2202      	movs	r2, #2
 80003aa:	4013      	ands	r3, r2
 80003ac:	d0fa      	beq.n	80003a4 <WriteMultipleByte+0x78>
	I2C1->TXDR = (uint32_t)(startAddr >> 8);//transmit data register
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	0a1b      	lsrs	r3, r3, #8
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	4b19      	ldr	r3, [pc, #100]	; (800041c <WriteMultipleByte+0xf0>)
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(I2C1->ISR & (1 << 1)));//TXIS
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <WriteMultipleByte+0xf0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	2202      	movs	r2, #2
 80003c2:	4013      	ands	r3, r2
 80003c4:	d0fa      	beq.n	80003bc <WriteMultipleByte+0x90>
	I2C1->TXDR = (uint32_t)(startAddr & 0xFF);//transmit data register
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	881a      	ldrh	r2, [r3, #0]
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <WriteMultipleByte+0xf0>)
 80003cc:	21ff      	movs	r1, #255	; 0xff
 80003ce:	400a      	ands	r2, r1
 80003d0:	629a      	str	r2, [r3, #40]	; 0x28

	uint8_t i;
	for(i = 0; i < size; i++)
 80003d2:	230f      	movs	r3, #15
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
 80003da:	e012      	b.n	8000402 <WriteMultipleByte+0xd6>
	{
		while(!(I2C1->ISR & (1 << 1)));//TXIS
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <WriteMultipleByte+0xf0>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	2202      	movs	r2, #2
 80003e4:	4013      	ands	r3, r2
 80003e6:	d0fa      	beq.n	80003de <WriteMultipleByte+0xb2>
		I2C1->TXDR = (uint32_t)data[i];//transmit data register
 80003e8:	210f      	movs	r1, #15
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	683a      	ldr	r2, [r7, #0]
 80003f0:	18d3      	adds	r3, r2, r3
 80003f2:	781a      	ldrb	r2, [r3, #0]
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <WriteMultipleByte+0xf0>)
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
	for(i = 0; i < size; i++)
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	3201      	adds	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	230f      	movs	r3, #15
 8000404:	18fa      	adds	r2, r7, r3
 8000406:	1dbb      	adds	r3, r7, #6
 8000408:	7812      	ldrb	r2, [r2, #0]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	429a      	cmp	r2, r3
 800040e:	d3e5      	bcc.n	80003dc <WriteMultipleByte+0xb0>
 8000410:	e000      	b.n	8000414 <WriteMultipleByte+0xe8>
		return;
 8000412:	46c0      	nop			; (mov r8, r8)
	}
}
 8000414:	46bd      	mov	sp, r7
 8000416:	b005      	add	sp, #20
 8000418:	bd90      	pop	{r4, r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40005400 	.word	0x40005400

08000420 <ReadMultipleByte>:

}

//Reading 128 bytes
void ReadMultipleByte(uint8_t devAddr, uint16_t resAddr, uint8_t* data, uint16_t size)
{
 8000420:	b5b0      	push	{r4, r5, r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	0004      	movs	r4, r0
 8000428:	0008      	movs	r0, r1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	0019      	movs	r1, r3
 800042e:	250f      	movs	r5, #15
 8000430:	197b      	adds	r3, r7, r5
 8000432:	1c22      	adds	r2, r4, #0
 8000434:	701a      	strb	r2, [r3, #0]
 8000436:	230c      	movs	r3, #12
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	1c02      	adds	r2, r0, #0
 800043c:	801a      	strh	r2, [r3, #0]
 800043e:	1dbb      	adds	r3, r7, #6
 8000440:	1c0a      	adds	r2, r1, #0
 8000442:	801a      	strh	r2, [r3, #0]
	//Data sheet pattern applied
	//Write operation
	I2C1->CR2 = 0;
 8000444:	4b47      	ldr	r3, [pc, #284]	; (8000564 <ReadMultipleByte+0x144>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
	//Slave address
	I2C1->CR2 |= ((uint32_t)(devAddr << 1));
 800044a:	4b46      	ldr	r3, [pc, #280]	; (8000564 <ReadMultipleByte+0x144>)
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	197b      	adds	r3, r7, r5
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	0019      	movs	r1, r3
 8000456:	4b43      	ldr	r3, [pc, #268]	; (8000564 <ReadMultipleByte+0x144>)
 8000458:	430a      	orrs	r2, r1
 800045a:	605a      	str	r2, [r3, #4]
	//Number of bytes that will send
	I2C1->CR2 |= (2U << 16);
 800045c:	4b41      	ldr	r3, [pc, #260]	; (8000564 <ReadMultipleByte+0x144>)
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	4b40      	ldr	r3, [pc, #256]	; (8000564 <ReadMultipleByte+0x144>)
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	0289      	lsls	r1, r1, #10
 8000466:	430a      	orrs	r2, r1
 8000468:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 13);//Start condition
 800046a:	4b3e      	ldr	r3, [pc, #248]	; (8000564 <ReadMultipleByte+0x144>)
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	4b3d      	ldr	r3, [pc, #244]	; (8000564 <ReadMultipleByte+0x144>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	0189      	lsls	r1, r1, #6
 8000474:	430a      	orrs	r2, r1
 8000476:	605a      	str	r2, [r3, #4]

	while(!(I2C1->ISR & (1 << 1)));//TXIS
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	4b3a      	ldr	r3, [pc, #232]	; (8000564 <ReadMultipleByte+0x144>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	2202      	movs	r2, #2
 8000480:	4013      	ands	r3, r2
 8000482:	d0fa      	beq.n	800047a <ReadMultipleByte+0x5a>
	I2C1->TXDR = (uint32_t)(resAddr >> 8);//transmit data register
 8000484:	230c      	movs	r3, #12
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	b29a      	uxth	r2, r3
 800048e:	4b35      	ldr	r3, [pc, #212]	; (8000564 <ReadMultipleByte+0x144>)
 8000490:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(I2C1->ISR & (1 << 1)));//TXIS
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	4b33      	ldr	r3, [pc, #204]	; (8000564 <ReadMultipleByte+0x144>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	2202      	movs	r2, #2
 800049a:	4013      	ands	r3, r2
 800049c:	d0fa      	beq.n	8000494 <ReadMultipleByte+0x74>
	I2C1->TXDR = (uint32_t)(resAddr & 0xFF);//transmit data register
 800049e:	230c      	movs	r3, #12
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	881a      	ldrh	r2, [r3, #0]
 80004a4:	4b2f      	ldr	r3, [pc, #188]	; (8000564 <ReadMultipleByte+0x144>)
 80004a6:	21ff      	movs	r1, #255	; 0xff
 80004a8:	400a      	ands	r2, r1
 80004aa:	629a      	str	r2, [r3, #40]	; 0x28

	while(!(I2C1->ISR & (1 << 6)));//TC
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <ReadMultipleByte+0x144>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	2240      	movs	r2, #64	; 0x40
 80004b4:	4013      	ands	r3, r2
 80004b6:	d0fa      	beq.n	80004ae <ReadMultipleByte+0x8e>

	//Read operation
	I2C1->CR2=0;
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <ReadMultipleByte+0x144>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
	//Slave address
	I2C1->CR2 |= ((uint32_t)(devAddr << 1));
 80004be:	4b29      	ldr	r3, [pc, #164]	; (8000564 <ReadMultipleByte+0x144>)
 80004c0:	685a      	ldr	r2, [r3, #4]
 80004c2:	230f      	movs	r3, #15
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	0019      	movs	r1, r3
 80004cc:	4b25      	ldr	r3, [pc, #148]	; (8000564 <ReadMultipleByte+0x144>)
 80004ce:	430a      	orrs	r2, r1
 80004d0:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 10);//READ MODE
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <ReadMultipleByte+0x144>)
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	4b23      	ldr	r3, [pc, #140]	; (8000564 <ReadMultipleByte+0x144>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	00c9      	lsls	r1, r1, #3
 80004dc:	430a      	orrs	r2, r1
 80004de:	605a      	str	r2, [r3, #4]
	//Number of bytes that will send
	I2C1->CR2 |= ((1U * size) << 16);
 80004e0:	4b20      	ldr	r3, [pc, #128]	; (8000564 <ReadMultipleByte+0x144>)
 80004e2:	6859      	ldr	r1, [r3, #4]
 80004e4:	1dbb      	adds	r3, r7, #6
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	041a      	lsls	r2, r3, #16
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <ReadMultipleByte+0x144>)
 80004ec:	430a      	orrs	r2, r1
 80004ee:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 25);//AUTOEND
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <ReadMultipleByte+0x144>)
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <ReadMultipleByte+0x144>)
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0489      	lsls	r1, r1, #18
 80004fa:	430a      	orrs	r2, r1
 80004fc:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 13);//Start condition
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <ReadMultipleByte+0x144>)
 8000500:	685a      	ldr	r2, [r3, #4]
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <ReadMultipleByte+0x144>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0189      	lsls	r1, r1, #6
 8000508:	430a      	orrs	r2, r1
 800050a:	605a      	str	r2, [r3, #4]

	uint16_t i;
	for(i = 0; i < size; ++i)
 800050c:	2316      	movs	r3, #22
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	2200      	movs	r2, #0
 8000512:	801a      	strh	r2, [r3, #0]
 8000514:	e013      	b.n	800053e <ReadMultipleByte+0x11e>
	{
		while(!(I2C1->ISR & (1 << 2)));//wait until RXNE=1
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <ReadMultipleByte+0x144>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	2204      	movs	r2, #4
 800051e:	4013      	ands	r3, r2
 8000520:	d0fa      	beq.n	8000518 <ReadMultipleByte+0xf8>
		data[i] = (uint8_t)I2C1->RXDR;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <ReadMultipleByte+0x144>)
 8000524:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000526:	2016      	movs	r0, #22
 8000528:	183b      	adds	r3, r7, r0
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	68ba      	ldr	r2, [r7, #8]
 800052e:	18d3      	adds	r3, r2, r3
 8000530:	b2ca      	uxtb	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < size; ++i)
 8000534:	183b      	adds	r3, r7, r0
 8000536:	183a      	adds	r2, r7, r0
 8000538:	8812      	ldrh	r2, [r2, #0]
 800053a:	3201      	adds	r2, #1
 800053c:	801a      	strh	r2, [r3, #0]
 800053e:	2316      	movs	r3, #22
 8000540:	18fa      	adds	r2, r7, r3
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	8812      	ldrh	r2, [r2, #0]
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	d3e4      	bcc.n	8000516 <ReadMultipleByte+0xf6>
	}
	I2C1->CR2 |= (1U << 15);//NACK
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <ReadMultipleByte+0x144>)
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <ReadMultipleByte+0x144>)
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	0209      	lsls	r1, r1, #8
 8000556:	430a      	orrs	r2, r1
 8000558:	605a      	str	r2, [r3, #4]
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b006      	add	sp, #24
 8000560:	bdb0      	pop	{r4, r5, r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40005400 	.word	0x40005400

08000568 <__NVIC_EnableIRQ>:
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b7f      	cmp	r3, #127	; 0x7f
 800057a:	d809      	bhi.n	8000590 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	001a      	movs	r2, r3
 8000582:	231f      	movs	r3, #31
 8000584:	401a      	ands	r2, r3
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <__NVIC_EnableIRQ+0x30>)
 8000588:	2101      	movs	r1, #1
 800058a:	4091      	lsls	r1, r2
 800058c:	000a      	movs	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}
 8000598:	e000e100 	.word	0xe000e100

0800059c <__NVIC_SetPriority>:
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	0002      	movs	r2, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b7f      	cmp	r3, #127	; 0x7f
 80005b0:	d828      	bhi.n	8000604 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005b2:	4a2f      	ldr	r2, [pc, #188]	; (8000670 <__NVIC_SetPriority+0xd4>)
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	089b      	lsrs	r3, r3, #2
 80005bc:	33c0      	adds	r3, #192	; 0xc0
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	589b      	ldr	r3, [r3, r2]
 80005c2:	1dfa      	adds	r2, r7, #7
 80005c4:	7812      	ldrb	r2, [r2, #0]
 80005c6:	0011      	movs	r1, r2
 80005c8:	2203      	movs	r2, #3
 80005ca:	400a      	ands	r2, r1
 80005cc:	00d2      	lsls	r2, r2, #3
 80005ce:	21ff      	movs	r1, #255	; 0xff
 80005d0:	4091      	lsls	r1, r2
 80005d2:	000a      	movs	r2, r1
 80005d4:	43d2      	mvns	r2, r2
 80005d6:	401a      	ands	r2, r3
 80005d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	019b      	lsls	r3, r3, #6
 80005de:	22ff      	movs	r2, #255	; 0xff
 80005e0:	401a      	ands	r2, r3
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	0018      	movs	r0, r3
 80005e8:	2303      	movs	r3, #3
 80005ea:	4003      	ands	r3, r0
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f0:	481f      	ldr	r0, [pc, #124]	; (8000670 <__NVIC_SetPriority+0xd4>)
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	430a      	orrs	r2, r1
 80005fc:	33c0      	adds	r3, #192	; 0xc0
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	501a      	str	r2, [r3, r0]
}
 8000602:	e031      	b.n	8000668 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <__NVIC_SetPriority+0xd8>)
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	0019      	movs	r1, r3
 800060c:	230f      	movs	r3, #15
 800060e:	400b      	ands	r3, r1
 8000610:	3b08      	subs	r3, #8
 8000612:	089b      	lsrs	r3, r3, #2
 8000614:	3306      	adds	r3, #6
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	18d3      	adds	r3, r2, r3
 800061a:	3304      	adds	r3, #4
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	1dfa      	adds	r2, r7, #7
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	0011      	movs	r1, r2
 8000624:	2203      	movs	r2, #3
 8000626:	400a      	ands	r2, r1
 8000628:	00d2      	lsls	r2, r2, #3
 800062a:	21ff      	movs	r1, #255	; 0xff
 800062c:	4091      	lsls	r1, r2
 800062e:	000a      	movs	r2, r1
 8000630:	43d2      	mvns	r2, r2
 8000632:	401a      	ands	r2, r3
 8000634:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	019b      	lsls	r3, r3, #6
 800063a:	22ff      	movs	r2, #255	; 0xff
 800063c:	401a      	ands	r2, r3
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	0018      	movs	r0, r3
 8000644:	2303      	movs	r3, #3
 8000646:	4003      	ands	r3, r0
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <__NVIC_SetPriority+0xd8>)
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	001c      	movs	r4, r3
 8000654:	230f      	movs	r3, #15
 8000656:	4023      	ands	r3, r4
 8000658:	3b08      	subs	r3, #8
 800065a:	089b      	lsrs	r3, r3, #2
 800065c:	430a      	orrs	r2, r1
 800065e:	3306      	adds	r3, #6
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	18c3      	adds	r3, r0, r3
 8000664:	3304      	adds	r3, #4
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b003      	add	sp, #12
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <SetSegmentA>:
#include "stm32g0xx.h"
#include <string.h>

 //Segments BEGIN
 //To light A LED
void SetSegmentA() {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3U << 2 * 4);
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	23a0      	movs	r3, #160	; 0xa0
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	4907      	ldr	r1, [pc, #28]	; (80006a4 <SetSegmentA+0x2c>)
 8000688:	400a      	ands	r2, r1
 800068a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2 * 4);
 800068c:	23a0      	movs	r3, #160	; 0xa0
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	23a0      	movs	r3, #160	; 0xa0
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	0049      	lsls	r1, r1, #1
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	fffffcff 	.word	0xfffffcff

080006a8 <SetSegmentB>:
//To light B LED
void SetSegmentB() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3U << 2 * 5);
 80006ac:	23a0      	movs	r3, #160	; 0xa0
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	23a0      	movs	r3, #160	; 0xa0
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	4907      	ldr	r1, [pc, #28]	; (80006d4 <SetSegmentB+0x2c>)
 80006b8:	400a      	ands	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2 * 5);
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	00c9      	lsls	r1, r1, #3
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	fffff3ff 	.word	0xfffff3ff

080006d8 <SetSegmentC>:
//To light C LED
void SetSegmentC() {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3U << 2 * 6);
 80006dc:	23a0      	movs	r3, #160	; 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	4907      	ldr	r1, [pc, #28]	; (8000704 <SetSegmentC+0x2c>)
 80006e8:	400a      	ands	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2 * 6);
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	23a0      	movs	r3, #160	; 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	2180      	movs	r1, #128	; 0x80
 80006f8:	0149      	lsls	r1, r1, #5
 80006fa:	430a      	orrs	r2, r1
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	ffffcfff 	.word	0xffffcfff

08000708 <SetSegmentD>:
//To light D LED
void SetSegmentD() {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3U << 2 * 7);
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	23a0      	movs	r3, #160	; 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	4907      	ldr	r1, [pc, #28]	; (8000734 <SetSegmentD+0x2c>)
 8000718:	400a      	ands	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2 * 7);
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	23a0      	movs	r3, #160	; 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	01c9      	lsls	r1, r1, #7
 800072a:	430a      	orrs	r2, r1
 800072c:	601a      	str	r2, [r3, #0]
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	ffff3fff 	.word	0xffff3fff

08000738 <SetSegmentE>:
//To light E LED
void SetSegmentE() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3U << 2 * 8);
 800073c:	23a0      	movs	r3, #160	; 0xa0
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	4907      	ldr	r1, [pc, #28]	; (8000764 <SetSegmentE+0x2c>)
 8000748:	400a      	ands	r2, r1
 800074a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2 * 8);
 800074c:	23a0      	movs	r3, #160	; 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	0249      	lsls	r1, r1, #9
 800075a:	430a      	orrs	r2, r1
 800075c:	601a      	str	r2, [r3, #0]
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	fffcffff 	.word	0xfffcffff

08000768 <SetSegmentF>:
//To light F LED
void SetSegmentF() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3U << 2 * 9);
 800076c:	23a0      	movs	r3, #160	; 0xa0
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	23a0      	movs	r3, #160	; 0xa0
 8000774:	05db      	lsls	r3, r3, #23
 8000776:	4907      	ldr	r1, [pc, #28]	; (8000794 <SetSegmentF+0x2c>)
 8000778:	400a      	ands	r2, r1
 800077a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2 * 9);
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	23a0      	movs	r3, #160	; 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	02c9      	lsls	r1, r1, #11
 800078a:	430a      	orrs	r2, r1
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	fff3ffff 	.word	0xfff3ffff

08000798 <SetSegmentG>:
//To light G LED
void SetSegmentG() {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

	GPIOA->MODER &= ~(3U << 2 * 10);
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	4907      	ldr	r1, [pc, #28]	; (80007c4 <SetSegmentG+0x2c>)
 80007a8:	400a      	ands	r2, r1
 80007aa:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2 * 10);
 80007ac:	23a0      	movs	r3, #160	; 0xa0
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	0349      	lsls	r1, r1, #13
 80007ba:	430a      	orrs	r2, r1
 80007bc:	601a      	str	r2, [r3, #0]
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	ffcfffff 	.word	0xffcfffff

080007c8 <SetNumberZero>:
//Segments END

//Numbers BEGIN
//To light Number 0
void SetNumberZero()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	SetSegmentA();
 80007cc:	f7ff ff54 	bl	8000678 <SetSegmentA>
	SetSegmentB();
 80007d0:	f7ff ff6a 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 80007d4:	f7ff ff80 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 80007d8:	f7ff ff96 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 80007dc:	f7ff ffac 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 80007e0:	f7ff ffc2 	bl	8000768 <SetSegmentF>
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <SetNumberOne>:
//To light Number 1
void SetNumberOne()
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
	SetSegmentB();
 80007ee:	f7ff ff5b 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 80007f2:	f7ff ff71 	bl	80006d8 <SetSegmentC>
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SetNumberTwo>:
//To light Number 2
void SetNumberTwo()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	SetSegmentA();
 8000800:	f7ff ff3a 	bl	8000678 <SetSegmentA>
	SetSegmentB();
 8000804:	f7ff ff50 	bl	80006a8 <SetSegmentB>
	SetSegmentD();
 8000808:	f7ff ff7e 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 800080c:	f7ff ff94 	bl	8000738 <SetSegmentE>
	SetSegmentG();
 8000810:	f7ff ffc2 	bl	8000798 <SetSegmentG>
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <SetNumberThree>:
//To light Number 3
void SetNumberThree()
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
	SetSegmentA();
 800081e:	f7ff ff2b 	bl	8000678 <SetSegmentA>
	SetSegmentB();
 8000822:	f7ff ff41 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 8000826:	f7ff ff57 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 800082a:	f7ff ff6d 	bl	8000708 <SetSegmentD>
	SetSegmentG();
 800082e:	f7ff ffb3 	bl	8000798 <SetSegmentG>

}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <SetNumberFour>:
//To light Number 4
void SetNumberFour()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	SetSegmentB();
 800083c:	f7ff ff34 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 8000840:	f7ff ff4a 	bl	80006d8 <SetSegmentC>
	SetSegmentF();
 8000844:	f7ff ff90 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 8000848:	f7ff ffa6 	bl	8000798 <SetSegmentG>
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <SetNumberFive>:
//To light Number 5
void SetNumberFive()
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
	SetSegmentA();
 8000856:	f7ff ff0f 	bl	8000678 <SetSegmentA>
	SetSegmentC();
 800085a:	f7ff ff3d 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 800085e:	f7ff ff53 	bl	8000708 <SetSegmentD>
	SetSegmentF();
 8000862:	f7ff ff81 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 8000866:	f7ff ff97 	bl	8000798 <SetSegmentG>
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <SetNumberSix>:
//To light Number 6
void SetNumberSix()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	SetSegmentA();
 8000874:	f7ff ff00 	bl	8000678 <SetSegmentA>
	SetSegmentC();
 8000878:	f7ff ff2e 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 800087c:	f7ff ff44 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 8000880:	f7ff ff5a 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 8000884:	f7ff ff70 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 8000888:	f7ff ff86 	bl	8000798 <SetSegmentG>
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <SetNumberSeven>:
//To light Number 7
void SetNumberSeven()
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
	SetSegmentA();
 8000896:	f7ff feef 	bl	8000678 <SetSegmentA>
	SetSegmentB();
 800089a:	f7ff ff05 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 800089e:	f7ff ff1b 	bl	80006d8 <SetSegmentC>
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SetNumberEight>:
//To light Number 8
void SetNumberEight()
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	SetSegmentA();
 80008ac:	f7ff fee4 	bl	8000678 <SetSegmentA>
	SetSegmentB();
 80008b0:	f7ff fefa 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 80008b4:	f7ff ff10 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 80008b8:	f7ff ff26 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 80008bc:	f7ff ff3c 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 80008c0:	f7ff ff52 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 80008c4:	f7ff ff68 	bl	8000798 <SetSegmentG>
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <SetNumberNine>:
//To light Number 9
void SetNumberNine()
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
	SetSegmentA();
 80008d2:	f7ff fed1 	bl	8000678 <SetSegmentA>
	SetSegmentB();
 80008d6:	f7ff fee7 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 80008da:	f7ff fefd 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 80008de:	f7ff ff13 	bl	8000708 <SetSegmentD>
	SetSegmentF();
 80008e2:	f7ff ff41 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 80008e6:	f7ff ff57 	bl	8000798 <SetSegmentG>
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <SetLetterA>:
//Numbers END

//Letters Begin
//To light Letter A
void SetLetterA()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	SetSegmentA();
 80008f4:	f7ff fec0 	bl	8000678 <SetSegmentA>
	SetSegmentB();
 80008f8:	f7ff fed6 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 80008fc:	f7ff feec 	bl	80006d8 <SetSegmentC>
	SetSegmentE();
 8000900:	f7ff ff1a 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 8000904:	f7ff ff30 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 8000908:	f7ff ff46 	bl	8000798 <SetSegmentG>
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <SetLetterB>:
//To light Letter B
void SetLetterB()
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
	SetSegmentC();
 8000916:	f7ff fedf 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 800091a:	f7ff fef5 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 800091e:	f7ff ff0b 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 8000922:	f7ff ff21 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 8000926:	f7ff ff37 	bl	8000798 <SetSegmentG>
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SetLetterC>:
//To light Letter C
void SetLetterC()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	SetSegmentD();
 8000934:	f7ff fee8 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 8000938:	f7ff fefe 	bl	8000738 <SetSegmentE>
	SetSegmentG();
 800093c:	f7ff ff2c 	bl	8000798 <SetSegmentG>
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <SetLetterD>:
//To light Letter D
void SetLetterD()
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
	SetSegmentB();
 800094a:	f7ff fead 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 800094e:	f7ff fec3 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 8000952:	f7ff fed9 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 8000956:	f7ff feef 	bl	8000738 <SetSegmentE>
	SetSegmentG();
 800095a:	f7ff ff1d 	bl	8000798 <SetSegmentG>
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <SetLetterE>:
//To light Letter E
void SetLetterE()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	SetSegmentA();
 8000968:	f7ff fe86 	bl	8000678 <SetSegmentA>
	SetSegmentD();
 800096c:	f7ff fecc 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 8000970:	f7ff fee2 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 8000974:	f7ff fef8 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 8000978:	f7ff ff0e 	bl	8000798 <SetSegmentG>
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <SetLetterI>:
//To light Letter I
void SetLetterI()
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
	SetSegmentE();
 8000986:	f7ff fed7 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 800098a:	f7ff feed 	bl	8000768 <SetSegmentF>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <SetLetterN>:
//To light Letter N
void SetLetterN()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	SetSegmentC();
 8000998:	f7ff fe9e 	bl	80006d8 <SetSegmentC>
	SetSegmentE();
 800099c:	f7ff fecc 	bl	8000738 <SetSegmentE>
	SetSegmentG();
 80009a0:	f7ff fefa 	bl	8000798 <SetSegmentG>
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <SetLetterV>:
//To light Letter V
void SetLetterV()
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
	SetSegmentC();
 80009ae:	f7ff fe93 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 80009b2:	f7ff fea9 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 80009b6:	f7ff febf 	bl	8000738 <SetSegmentE>

}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SetLetterO>:
//To light Letter O
void SetLetterO()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	SetSegmentC();
 80009c4:	f7ff fe88 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 80009c8:	f7ff fe9e 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 80009cc:	f7ff feb4 	bl	8000738 <SetSegmentE>
	SetSegmentG();
 80009d0:	f7ff fee2 	bl	8000798 <SetSegmentG>
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <SetLetterU>:
//To light Letter U
void SetLetterU()
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
	SetSegmentB();
 80009de:	f7ff fe63 	bl	80006a8 <SetSegmentB>
	SetSegmentC();
 80009e2:	f7ff fe79 	bl	80006d8 <SetSegmentC>
	SetSegmentD();
 80009e6:	f7ff fe8f 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 80009ea:	f7ff fea5 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 80009ee:	f7ff febb 	bl	8000768 <SetSegmentF>
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SetLetterF>:
//To light Letter F
void SetLetterF()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	SetSegmentA();
 80009fc:	f7ff fe3c 	bl	8000678 <SetSegmentA>
	SetSegmentE();
 8000a00:	f7ff fe9a 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 8000a04:	f7ff feb0 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 8000a08:	f7ff fec6 	bl	8000798 <SetSegmentG>
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <SetLetterL>:
//To light Letter L
void SetLetterL()
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
	SetSegmentD();
 8000a16:	f7ff fe77 	bl	8000708 <SetSegmentD>
	SetSegmentE();
 8000a1a:	f7ff fe8d 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 8000a1e:	f7ff fea3 	bl	8000768 <SetSegmentF>
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SetLetterP>:
//To light Letter P
void SetLetterP()
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	SetSegmentA();
 8000a2c:	f7ff fe24 	bl	8000678 <SetSegmentA>
	SetSegmentB();
 8000a30:	f7ff fe3a 	bl	80006a8 <SetSegmentB>
	SetSegmentE();
 8000a34:	f7ff fe80 	bl	8000738 <SetSegmentE>
	SetSegmentF();
 8000a38:	f7ff fe96 	bl	8000768 <SetSegmentF>
	SetSegmentG();
 8000a3c:	f7ff feac 	bl	8000798 <SetSegmentG>
}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <SetLetterR>:
//To light Letter R
void SetLetterR()
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
	SetSegmentE();
 8000a4a:	f7ff fe75 	bl	8000738 <SetSegmentE>
	SetSegmentG();
 8000a4e:	f7ff fea3 	bl	8000798 <SetSegmentG>
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <TurnBeginning>:
//Letters End

//To turn leftmost digit when shifter reachs to rightmost digit
void TurnBeginning()
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	//B0
	GPIOB->MODER &= ~(3U << 2 * 0);
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <TurnBeginning+0x60>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <TurnBeginning+0x60>)
 8000a62:	2103      	movs	r1, #3
 8000a64:	438a      	bics	r2, r1
 8000a66:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2 * 0);
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <TurnBeginning+0x60>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <TurnBeginning+0x60>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
	GPIOB->BRR = (1U << 0);
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <TurnBeginning+0x60>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOB->ODR |= (1U << 0);
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <TurnBeginning+0x60>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <TurnBeginning+0x60>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	615a      	str	r2, [r3, #20]
	//B1
	GPIOB->MODER &= ~(0U << 2 * 1);
 8000a86:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <TurnBeginning+0x60>)
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <TurnBeginning+0x60>)
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	601a      	str	r2, [r3, #0]
	GPIOB->BRR = (1U << 1);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <TurnBeginning+0x60>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
	//B2
	GPIOB->MODER &= ~(0U << 2 * 2);
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <TurnBeginning+0x60>)
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <TurnBeginning+0x60>)
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	601a      	str	r2, [r3, #0]
	GPIOB->BRR = (1U << 2);
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <TurnBeginning+0x60>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
	//B3
	GPIOB->MODER &= ~(0U << 2 * 3);
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <TurnBeginning+0x60>)
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <TurnBeginning+0x60>)
 8000aa6:	6812      	ldr	r2, [r2, #0]
 8000aa8:	601a      	str	r2, [r3, #0]
	GPIOB->BRR = (1U << 3);
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <TurnBeginning+0x60>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	50000400 	.word	0x50000400

08000abc <ShiftDigit>:

//To shift digits that will be displayed
void ShiftDigit(unsigned int currIndex)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	if (currIndex >= 3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d902      	bls.n	8000ad0 <ShiftDigit+0x14>
	{
		TurnBeginning();
 8000aca:	f7ff ffc5 	bl	8000a58 <TurnBeginning>
		return;
 8000ace:	e028      	b.n	8000b22 <ShiftDigit+0x66>
	}
	GPIOB->MODER &= ~(0U << 2 * (currIndex));
 8000ad0:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <ShiftDigit+0x6c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <ShiftDigit+0x6c>)
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(3U << 2 * (currIndex + 1));
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <ShiftDigit+0x6c>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	4099      	lsls	r1, r3
 8000ae6:	000b      	movs	r3, r1
 8000ae8:	43d9      	mvns	r1, r3
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <ShiftDigit+0x6c>)
 8000aec:	400a      	ands	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2 * (currIndex + 1));
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <ShiftDigit+0x6c>)
 8000af2:	6819      	ldr	r1, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2201      	movs	r2, #1
 8000afc:	409a      	lsls	r2, r3
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <ShiftDigit+0x6c>)
 8000b00:	430a      	orrs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
	GPIOB->BRR = (1U << currIndex);
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <ShiftDigit+0x6c>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	000a      	movs	r2, r1
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOB->ODR |= (1U << (currIndex + 1));
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <ShiftDigit+0x6c>)
 8000b12:	6959      	ldr	r1, [r3, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3301      	adds	r3, #1
 8000b18:	2201      	movs	r2, #1
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <ShiftDigit+0x6c>)
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	615a      	str	r2, [r3, #20]

}
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	50000400 	.word	0x50000400

08000b2c <DisplayChar>:

//To display numbers
void DisplayChar(char ch)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	701a      	strb	r2, [r3, #0]
	switch (ch)
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	3b30      	subs	r3, #48	; 0x30
 8000b3e:	2b46      	cmp	r3, #70	; 0x46
 8000b40:	d84c      	bhi.n	8000bdc <DisplayChar+0xb0>
 8000b42:	009a      	lsls	r2, r3, #2
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <DisplayChar+0xbc>)
 8000b46:	18d3      	adds	r3, r2, r3
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	469f      	mov	pc, r3
	{
	case '0':
		SetNumberZero();
 8000b4c:	f7ff fe3c 	bl	80007c8 <SetNumberZero>
		break;
 8000b50:	e045      	b.n	8000bde <DisplayChar+0xb2>
	case '1':
		SetNumberOne();
 8000b52:	f7ff fe4a 	bl	80007ea <SetNumberOne>
		break;
 8000b56:	e042      	b.n	8000bde <DisplayChar+0xb2>
	case '2':
		SetNumberTwo();
 8000b58:	f7ff fe50 	bl	80007fc <SetNumberTwo>
		break;
 8000b5c:	e03f      	b.n	8000bde <DisplayChar+0xb2>
	case '3':
		SetNumberThree();
 8000b5e:	f7ff fe5c 	bl	800081a <SetNumberThree>
		break;
 8000b62:	e03c      	b.n	8000bde <DisplayChar+0xb2>
	case '4':
		SetNumberFour();
 8000b64:	f7ff fe68 	bl	8000838 <SetNumberFour>
		break;
 8000b68:	e039      	b.n	8000bde <DisplayChar+0xb2>
	case '5':
		SetNumberFive();
 8000b6a:	f7ff fe72 	bl	8000852 <SetNumberFive>
		break;
 8000b6e:	e036      	b.n	8000bde <DisplayChar+0xb2>
	case '6':
		SetNumberSix();
 8000b70:	f7ff fe7e 	bl	8000870 <SetNumberSix>
		break;
 8000b74:	e033      	b.n	8000bde <DisplayChar+0xb2>
	case '7':
		SetNumberSeven();
 8000b76:	f7ff fe8c 	bl	8000892 <SetNumberSeven>
		break;
 8000b7a:	e030      	b.n	8000bde <DisplayChar+0xb2>
	case '8':
		SetNumberEight();
 8000b7c:	f7ff fe94 	bl	80008a8 <SetNumberEight>
		break;
 8000b80:	e02d      	b.n	8000bde <DisplayChar+0xb2>
	case '9':
		SetNumberNine();
 8000b82:	f7ff fea4 	bl	80008ce <SetNumberNine>
		break;
 8000b86:	e02a      	b.n	8000bde <DisplayChar+0xb2>
	case 'a':
		SetLetterA();
 8000b88:	f7ff feb2 	bl	80008f0 <SetLetterA>
		break;
 8000b8c:	e027      	b.n	8000bde <DisplayChar+0xb2>
	case 'b':
		SetLetterB();
 8000b8e:	f7ff fec0 	bl	8000912 <SetLetterB>
		break;
 8000b92:	e024      	b.n	8000bde <DisplayChar+0xb2>
	case 'c':
		SetLetterC();
 8000b94:	f7ff fecc 	bl	8000930 <SetLetterC>
		break;
 8000b98:	e021      	b.n	8000bde <DisplayChar+0xb2>
	case 'd':
		SetLetterD();
 8000b9a:	f7ff fed4 	bl	8000946 <SetLetterD>
		break;
 8000b9e:	e01e      	b.n	8000bde <DisplayChar+0xb2>
	case 'e':
		SetLetterE();
 8000ba0:	f7ff fee0 	bl	8000964 <SetLetterE>
		break;
 8000ba4:	e01b      	b.n	8000bde <DisplayChar+0xb2>
	case 'i':
		SetLetterI();
 8000ba6:	f7ff feec 	bl	8000982 <SetLetterI>
		break;
 8000baa:	e018      	b.n	8000bde <DisplayChar+0xb2>
	case 'n':
		SetLetterN();
 8000bac:	f7ff fef2 	bl	8000994 <SetLetterN>
		break;
 8000bb0:	e015      	b.n	8000bde <DisplayChar+0xb2>
	case 'v':
		SetLetterV();
 8000bb2:	f7ff fefa 	bl	80009aa <SetLetterV>
		break;
 8000bb6:	e012      	b.n	8000bde <DisplayChar+0xb2>
	case 'o':
		SetLetterO();
 8000bb8:	f7ff ff02 	bl	80009c0 <SetLetterO>
		break;
 8000bbc:	e00f      	b.n	8000bde <DisplayChar+0xb2>
	case 'u':
		SetLetterU();
 8000bbe:	f7ff ff0c 	bl	80009da <SetLetterU>
		break;
 8000bc2:	e00c      	b.n	8000bde <DisplayChar+0xb2>
	case 'f':
		SetLetterF();
 8000bc4:	f7ff ff18 	bl	80009f8 <SetLetterF>
		break;
 8000bc8:	e009      	b.n	8000bde <DisplayChar+0xb2>
	case 'l':
		SetLetterL();
 8000bca:	f7ff ff22 	bl	8000a12 <SetLetterL>
		break;
 8000bce:	e006      	b.n	8000bde <DisplayChar+0xb2>
	case 'p':
		SetLetterP();
 8000bd0:	f7ff ff2a 	bl	8000a28 <SetLetterP>
		break;
 8000bd4:	e003      	b.n	8000bde <DisplayChar+0xb2>
	case 'r':
		SetLetterR();
 8000bd6:	f7ff ff36 	bl	8000a46 <SetLetterR>
		break;
 8000bda:	e000      	b.n	8000bde <DisplayChar+0xb2>
	default:
		break;
 8000bdc:	46c0      	nop			; (mov r8, r8)
	}
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	08001e4c 	.word	0x08001e4c

08000bec <IntToChar>:

char IntToChar(uint8_t digit)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	701a      	strb	r2, [r3, #0]
	switch (digit)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b09      	cmp	r3, #9
 8000bfe:	d818      	bhi.n	8000c32 <IntToChar+0x46>
 8000c00:	009a      	lsls	r2, r3, #2
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <IntToChar+0x54>)
 8000c04:	18d3      	adds	r3, r2, r3
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	469f      	mov	pc, r3
	{
	  case 0:
		return '0';
 8000c0a:	2330      	movs	r3, #48	; 0x30
 8000c0c:	e013      	b.n	8000c36 <IntToChar+0x4a>
	  case 1:
		return '1';
 8000c0e:	2331      	movs	r3, #49	; 0x31
 8000c10:	e011      	b.n	8000c36 <IntToChar+0x4a>
	  case 2:
		return '2';
 8000c12:	2332      	movs	r3, #50	; 0x32
 8000c14:	e00f      	b.n	8000c36 <IntToChar+0x4a>
	  case 3:
		return '3';
 8000c16:	2333      	movs	r3, #51	; 0x33
 8000c18:	e00d      	b.n	8000c36 <IntToChar+0x4a>
	  case 4:
		return '4';
 8000c1a:	2334      	movs	r3, #52	; 0x34
 8000c1c:	e00b      	b.n	8000c36 <IntToChar+0x4a>
	  case 5:
		return '5';
 8000c1e:	2335      	movs	r3, #53	; 0x35
 8000c20:	e009      	b.n	8000c36 <IntToChar+0x4a>
	  case 6:
		return '6';
 8000c22:	2336      	movs	r3, #54	; 0x36
 8000c24:	e007      	b.n	8000c36 <IntToChar+0x4a>
	  case 7:
		return '7';
 8000c26:	2337      	movs	r3, #55	; 0x37
 8000c28:	e005      	b.n	8000c36 <IntToChar+0x4a>
	  case 8:
		return '8';
 8000c2a:	2338      	movs	r3, #56	; 0x38
 8000c2c:	e003      	b.n	8000c36 <IntToChar+0x4a>
	  case 9:
		return '9';
 8000c2e:	2339      	movs	r3, #57	; 0x39
 8000c30:	e001      	b.n	8000c36 <IntToChar+0x4a>
	  default:
		break;
 8000c32:	46c0      	nop			; (mov r8, r8)
	 }
	return '0';
 8000c34:	2330      	movs	r3, #48	; 0x30
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	08001f68 	.word	0x08001f68

08000c44 <ResetDisplay>:

//Clearing displayer
void ResetDisplay()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	uint8_t index;
	for(index = 4;index < 11;index++)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e02b      	b.n	8000caa <ResetDisplay+0x66>
	{
		GPIOA->MODER &= ~(3U << 2 * index);
 8000c52:	23a0      	movs	r3, #160	; 0xa0
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2103      	movs	r1, #3
 8000c60:	4099      	lsls	r1, r3
 8000c62:	000b      	movs	r3, r1
 8000c64:	43d9      	mvns	r1, r3
 8000c66:	23a0      	movs	r3, #160	; 0xa0
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]
		GPIOA->MODER |= (3U << 2 * index);
 8000c6e:	23a0      	movs	r3, #160	; 0xa0
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	6819      	ldr	r1, [r3, #0]
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	23a0      	movs	r3, #160	; 0xa0
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
		GPIOA->ODR &= ~(1U << index);
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	4099      	lsls	r1, r3
 8000c94:	000b      	movs	r3, r1
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	23a0      	movs	r3, #160	; 0xa0
 8000c9a:	05db      	lsls	r3, r3, #23
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	615a      	str	r2, [r3, #20]
	for(index = 4;index < 11;index++)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	3201      	adds	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b0a      	cmp	r3, #10
 8000cb0:	d9cf      	bls.n	8000c52 <ResetDisplay+0xe>
	}

}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <delay>:
STATE curr_state;


//Basic common delay function
void delay(volatile unsigned int s)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	for (; s > 0; s--);
 8000cc4:	e002      	b.n	8000ccc <delay+0x10>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f9      	bne.n	8000cc6 <delay+0xa>
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <clearRow>:

//CLEAR KEYPAD ROWS
void clearRow(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	GPIOB->BRR = (1U << 6);
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <clearRow+0x20>)
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOB->BRR = (1U << 7);
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <clearRow+0x20>)
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOA->BRR = (1U << 0);
 8000cec:	23a0      	movs	r3, #160	; 0xa0
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	50000400 	.word	0x50000400

08000d00 <setRow>:
//SET KEYPAD ROWS
void setRow(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1U << 6);
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <setRow+0x34>)
 8000d06:	695a      	ldr	r2, [r3, #20]
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <setRow+0x34>)
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |= (1U << 7);
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <setRow+0x34>)
 8000d12:	695a      	ldr	r2, [r3, #20]
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <setRow+0x34>)
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1U << 0);
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	23a0      	movs	r3, #160	; 0xa0
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	2101      	movs	r1, #1
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	615a      	str	r2, [r3, #20]
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	50000400 	.word	0x50000400

08000d38 <SetStateProperty>:

//Assigning proper chars to display array
//to show current state properly
void SetStateProperty(STATE state)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	701a      	strb	r2, [r3, #0]
	switch(state)
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d900      	bls.n	8000d4e <SetStateProperty+0x16>
 8000d4c:	e084      	b.n	8000e58 <SetStateProperty+0x120>
 8000d4e:	009a      	lsls	r2, r3, #2
 8000d50:	4b45      	ldr	r3, [pc, #276]	; (8000e68 <SetStateProperty+0x130>)
 8000d52:	18d3      	adds	r3, r2, r3
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	469f      	mov	pc, r3
	{
		case START:
		disp_letters[0] = '1';
 8000d58:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <SetStateProperty+0x134>)
 8000d5a:	2231      	movs	r2, #49	; 0x31
 8000d5c:	701a      	strb	r2, [r3, #0]
		disp_letters[1] = '9';
 8000d5e:	4b43      	ldr	r3, [pc, #268]	; (8000e6c <SetStateProperty+0x134>)
 8000d60:	2239      	movs	r2, #57	; 0x39
 8000d62:	705a      	strb	r2, [r3, #1]
		disp_letters[2] = '0';
 8000d64:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <SetStateProperty+0x134>)
 8000d66:	2230      	movs	r2, #48	; 0x30
 8000d68:	709a      	strb	r2, [r3, #2]
		disp_letters[3] = '5';
 8000d6a:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <SetStateProperty+0x134>)
 8000d6c:	2235      	movs	r2, #53	; 0x35
 8000d6e:	70da      	strb	r2, [r3, #3]
		break;
 8000d70:	e075      	b.n	8000e5e <SetStateProperty+0x126>
		case IDLE:
		disp_letters[0] = 'i';
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <SetStateProperty+0x134>)
 8000d74:	2269      	movs	r2, #105	; 0x69
 8000d76:	701a      	strb	r2, [r3, #0]
		disp_letters[1] = 'd';
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <SetStateProperty+0x134>)
 8000d7a:	2264      	movs	r2, #100	; 0x64
 8000d7c:	705a      	strb	r2, [r3, #1]
		disp_letters[2] = 'l';
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <SetStateProperty+0x134>)
 8000d80:	226c      	movs	r2, #108	; 0x6c
 8000d82:	709a      	strb	r2, [r3, #2]
		disp_letters[3] = 'e';
 8000d84:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <SetStateProperty+0x134>)
 8000d86:	2265      	movs	r2, #101	; 0x65
 8000d88:	70da      	strb	r2, [r3, #3]
		break;
 8000d8a:	e068      	b.n	8000e5e <SetStateProperty+0x126>
		case FULL:
		disp_letters[0] = 'f';
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <SetStateProperty+0x134>)
 8000d8e:	2266      	movs	r2, #102	; 0x66
 8000d90:	701a      	strb	r2, [r3, #0]
		disp_letters[1] = 'u';
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <SetStateProperty+0x134>)
 8000d94:	2275      	movs	r2, #117	; 0x75
 8000d96:	705a      	strb	r2, [r3, #1]
		disp_letters[2] = 'l';
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <SetStateProperty+0x134>)
 8000d9a:	226c      	movs	r2, #108	; 0x6c
 8000d9c:	709a      	strb	r2, [r3, #2]
		disp_letters[3] = 'l';
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <SetStateProperty+0x134>)
 8000da0:	226c      	movs	r2, #108	; 0x6c
 8000da2:	70da      	strb	r2, [r3, #3]
		break;
 8000da4:	e05b      	b.n	8000e5e <SetStateProperty+0x126>
		case RECORD:
		disp_letters[0] = 'r';
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <SetStateProperty+0x134>)
 8000da8:	2272      	movs	r2, #114	; 0x72
 8000daa:	701a      	strb	r2, [r3, #0]
		disp_letters[1] = 'c';
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <SetStateProperty+0x134>)
 8000dae:	2263      	movs	r2, #99	; 0x63
 8000db0:	705a      	strb	r2, [r3, #1]
		disp_letters[2] = 'd';
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <SetStateProperty+0x134>)
 8000db4:	2264      	movs	r2, #100	; 0x64
 8000db6:	709a      	strb	r2, [r3, #2]
		disp_letters[3] = IntToChar(record_time);
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <SetStateProperty+0x138>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ff15 	bl	8000bec <IntToChar>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <SetStateProperty+0x134>)
 8000dc8:	70da      	strb	r2, [r3, #3]
		break;
 8000dca:	e048      	b.n	8000e5e <SetStateProperty+0x126>
		case PLAY:
		disp_letters[0] = 'p';
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <SetStateProperty+0x134>)
 8000dce:	2270      	movs	r2, #112	; 0x70
 8000dd0:	701a      	strb	r2, [r3, #0]
		disp_letters[1] = 'l';
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <SetStateProperty+0x134>)
 8000dd4:	226c      	movs	r2, #108	; 0x6c
 8000dd6:	705a      	strb	r2, [r3, #1]
		disp_letters[2] = 'b';
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <SetStateProperty+0x134>)
 8000dda:	2262      	movs	r2, #98	; 0x62
 8000ddc:	709a      	strb	r2, [r3, #2]
		disp_letters[3] = IntToChar(selected_track);
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <SetStateProperty+0x13c>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	0018      	movs	r0, r3
 8000de4:	f7ff ff02 	bl	8000bec <IntToChar>
 8000de8:	0003      	movs	r3, r0
 8000dea:	001a      	movs	r2, r3
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <SetStateProperty+0x134>)
 8000dee:	70da      	strb	r2, [r3, #3]
		break;
 8000df0:	e035      	b.n	8000e5e <SetStateProperty+0x126>
		case STATUS:
		disp_letters[0] = 'a';
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <SetStateProperty+0x134>)
 8000df4:	2261      	movs	r2, #97	; 0x61
 8000df6:	701a      	strb	r2, [r3, #0]
		disp_letters[1] = 'v';
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <SetStateProperty+0x134>)
 8000dfa:	2276      	movs	r2, #118	; 0x76
 8000dfc:	705a      	strb	r2, [r3, #1]
		disp_letters[2] = 'a';
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <SetStateProperty+0x134>)
 8000e00:	2261      	movs	r2, #97	; 0x61
 8000e02:	709a      	strb	r2, [r3, #2]
		disp_letters[3] = IntToChar(track_size);
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <SetStateProperty+0x140>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff feef 	bl	8000bec <IntToChar>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	001a      	movs	r2, r3
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <SetStateProperty+0x134>)
 8000e14:	70da      	strb	r2, [r3, #3]
		break;
 8000e16:	e022      	b.n	8000e5e <SetStateProperty+0x126>
		case DELETE:
		break;
		case PAUSE:
		disp_letters[0] = 'p';
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <SetStateProperty+0x134>)
 8000e1a:	2270      	movs	r2, #112	; 0x70
 8000e1c:	701a      	strb	r2, [r3, #0]
		disp_letters[1] = 'a';
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <SetStateProperty+0x134>)
 8000e20:	2261      	movs	r2, #97	; 0x61
 8000e22:	705a      	strb	r2, [r3, #1]
		disp_letters[2] = 'u';
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <SetStateProperty+0x134>)
 8000e26:	2275      	movs	r2, #117	; 0x75
 8000e28:	709a      	strb	r2, [r3, #2]
		disp_letters[3] = IntToChar(selected_track);
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <SetStateProperty+0x13c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fedc 	bl	8000bec <IntToChar>
 8000e34:	0003      	movs	r3, r0
 8000e36:	001a      	movs	r2, r3
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <SetStateProperty+0x134>)
 8000e3a:	70da      	strb	r2, [r3, #3]
		break;
 8000e3c:	e00f      	b.n	8000e5e <SetStateProperty+0x126>
		case INVALID:
		disp_letters[0] = 'i';
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <SetStateProperty+0x134>)
 8000e40:	2269      	movs	r2, #105	; 0x69
 8000e42:	701a      	strb	r2, [r3, #0]
		disp_letters[1] = 'n';
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <SetStateProperty+0x134>)
 8000e46:	226e      	movs	r2, #110	; 0x6e
 8000e48:	705a      	strb	r2, [r3, #1]
		disp_letters[2] = 'v';
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <SetStateProperty+0x134>)
 8000e4c:	2276      	movs	r2, #118	; 0x76
 8000e4e:	709a      	strb	r2, [r3, #2]
		disp_letters[3] = 'd';
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SetStateProperty+0x134>)
 8000e52:	2264      	movs	r2, #100	; 0x64
 8000e54:	70da      	strb	r2, [r3, #3]
		break;
 8000e56:	e002      	b.n	8000e5e <SetStateProperty+0x126>
		default:
		break;
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	e000      	b.n	8000e5e <SetStateProperty+0x126>
		break;
 8000e5c:	46c0      	nop			; (mov r8, r8)
	}
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	08001f90 	.word	0x08001f90
 8000e6c:	200000a8 	.word	0x200000a8
 8000e70:	20000003 	.word	0x20000003
 8000e74:	200000bc 	.word	0x200000bc
 8000e78:	20000094 	.word	0x20000094

08000e7c <INIT_PWM>:

//TIMER3 USED BY PWM
void INIT_PWM()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	//Used TIM3 at D12 pin
	RCC->APBENR1 |= (1U << 1);
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <INIT_PWM+0x9c>)
 8000e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <INIT_PWM+0x9c>)
 8000e86:	2102      	movs	r1, #2
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	63da      	str	r2, [r3, #60]	; 0x3c

	//Set PB4 as alternate function
	GPIOB->MODER &= ~(3U << 2 * 4);
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <INIT_PWM+0xa0>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <INIT_PWM+0xa0>)
 8000e92:	4923      	ldr	r1, [pc, #140]	; (8000f20 <INIT_PWM+0xa4>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2U << 2 * 4);
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <INIT_PWM+0xa0>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <INIT_PWM+0xa0>)
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	0089      	lsls	r1, r1, #2
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

	//Configure PB4 pins AF0
	GPIOB->AFR[0] |= 1U << 4 * 4;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <INIT_PWM+0xa0>)
 8000ea8:	6a1a      	ldr	r2, [r3, #32]
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <INIT_PWM+0xa0>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0249      	lsls	r1, r1, #9
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	621a      	str	r2, [r3, #32]

	//Sets the duty cycle
	TIM3->CCR1 = 500;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <INIT_PWM+0xa8>)
 8000eb6:	22fa      	movs	r2, #250	; 0xfa
 8000eb8:	0052      	lsls	r2, r2, #1
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

	//PWM configuration begins
	TIM3->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1);
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <INIT_PWM+0xa8>)
 8000ebe:	699a      	ldr	r2, [r3, #24]
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <INIT_PWM+0xa8>)
 8000ec2:	2160      	movs	r1, #96	; 0x60
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	619a      	str	r2, [r3, #24]

	//Enabling preload register
	TIM3->CCMR1 |= (TIM_CCMR1_OC1PE);
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <INIT_PWM+0xa8>)
 8000eca:	699a      	ldr	r2, [r3, #24]
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <INIT_PWM+0xa8>)
 8000ece:	2108      	movs	r1, #8
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	619a      	str	r2, [r3, #24]

	//Enabling auto reload
	TIM3->CR1 |= TIM_CR1_ARPE;
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <INIT_PWM+0xa8>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <INIT_PWM+0xa8>)
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	430a      	orrs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]

	//Output pin active high
	TIM3->CCER &= ~(TIM_CCER_CC1P);
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <INIT_PWM+0xa8>)
 8000ee2:	6a1a      	ldr	r2, [r3, #32]
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <INIT_PWM+0xa8>)
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	438a      	bics	r2, r1
 8000eea:	621a      	str	r2, [r3, #32]

	//Enabling output pin
	TIM3->CCER |= TIM_CCER_CC1E;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <INIT_PWM+0xa8>)
 8000eee:	6a1a      	ldr	r2, [r3, #32]
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <INIT_PWM+0xa8>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	621a      	str	r2, [r3, #32]

	//Timer Prescaler Value
	TIM3->PSC = 2;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <INIT_PWM+0xa8>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28

	//Auto reload value.
	TIM3->ARR = 255;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <INIT_PWM+0xa8>)
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c

	//Start Timer
	TIM3->DIER = (1 << 0);
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <INIT_PWM+0xa8>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	60da      	str	r2, [r3, #12]
	TIM3->CR1 = (1 << 0);
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <INIT_PWM+0xa8>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	50000400 	.word	0x50000400
 8000f20:	fffffcff 	.word	0xfffffcff
 8000f24:	40000400 	.word	0x40000400

08000f28 <INIT_TIMER2>:

//TRACK PLAYER & RECORDER
void INIT_TIMER2()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	RCC->APBENR1 |= (1U);
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <INIT_TIMER2+0x64>)
 8000f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <INIT_TIMER2+0x64>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CR1 = 0;
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	05db      	lsls	r3, r3, #23
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= (1 << 7);
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	05db      	lsls	r3, r3, #23
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
	TIM2->CNT = 0;
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	05db      	lsls	r3, r3, #23
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24

	// 6300 Hz(Sampling Freq) = 1600000 / ((ARR + 1) * (PSC + 1))
	TIM2->PSC = 1;
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1268;
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <INIT_TIMER2+0x68>)
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER = (1 << 0);
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	05db      	lsls	r3, r3, #23
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	60da      	str	r2, [r3, #12]
	TIM2->CR1 = (1 << 0);
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM2_IRQn, 0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f7ff fb0e 	bl	800059c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000f80:	200f      	movs	r0, #15
 8000f82:	f7ff faf1 	bl	8000568 <__NVIC_EnableIRQ>
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	000004f4 	.word	0x000004f4

08000f94 <INIT_TIMER14>:

//DEBOUNCING & DISPLAYER TIMER
void INIT_TIMER14()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	RCC->APBENR2 |= (1U << 15);
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <INIT_TIMER14+0x58>)
 8000f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <INIT_TIMER14+0x58>)
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	0209      	lsls	r1, r1, #8
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40

	TIM14->CR1 = 0;
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <INIT_TIMER14+0x5c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
	TIM14->CR1 |= (1 << 7);
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <INIT_TIMER14+0x5c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <INIT_TIMER14+0x5c>)
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
	TIM14->CNT = 0;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <INIT_TIMER14+0x5c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24

	TIM14->PSC = 1;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <INIT_TIMER14+0x5c>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM14->ARR = 16000;//1MS
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <INIT_TIMER14+0x5c>)
 8000fc6:	22fa      	movs	r2, #250	; 0xfa
 8000fc8:	0192      	lsls	r2, r2, #6
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM14->DIER = (1 << 0);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <INIT_TIMER14+0x5c>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	60da      	str	r2, [r3, #12]
	TIM14->CR1 = (1 << 0);
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <INIT_TIMER14+0x5c>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM14_IRQn, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2013      	movs	r0, #19
 8000fdc:	f7ff fade 	bl	800059c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM14_IRQn);
 8000fe0:	2013      	movs	r0, #19
 8000fe2:	f7ff fac1 	bl	8000568 <__NVIC_EnableIRQ>
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40002000 	.word	0x40002000

08000ff4 <PlaySound>:

//Play sound
void PlaySound(uint8_t sound)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	701a      	strb	r2, [r3, #0]
	TIM3->CCR1 = (uint32_t)sound;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <PlaySound+0x1c>)
 8001002:	1dfa      	adds	r2, r7, #7
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40000400 	.word	0x40000400

08001014 <TIM2_IRQHandler>:

//Track and recorder interrupt
void TIM2_IRQHandler()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	//RECORD STATE
	if(curr_state == RECORD)
 800101a:	4bbd      	ldr	r3, [pc, #756]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d000      	beq.n	8001024 <TIM2_IRQHandler+0x10>
 8001022:	e0c5      	b.n	80011b0 <TIM2_IRQHandler+0x19c>
	{
		//ADC START CONVERSION
		ADC1->CR |= (1U << 2);
 8001024:	4bbb      	ldr	r3, [pc, #748]	; (8001314 <TIM2_IRQHandler+0x300>)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	4bba      	ldr	r3, [pc, #744]	; (8001314 <TIM2_IRQHandler+0x300>)
 800102a:	2104      	movs	r1, #4
 800102c:	430a      	orrs	r2, r1
 800102e:	609a      	str	r2, [r3, #8]

		//Wait until end of conversion flag is true
		while (!(ADC1->ISR & (1U << 2))) {}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	4bb8      	ldr	r3, [pc, #736]	; (8001314 <TIM2_IRQHandler+0x300>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2204      	movs	r2, #4
 8001038:	4013      	ands	r3, r2
 800103a:	d0fa      	beq.n	8001032 <TIM2_IRQHandler+0x1e>

		//Read data register and write it to buffer
		if (bw_index < 128)
 800103c:	4bb6      	ldr	r3, [pc, #728]	; (8001318 <TIM2_IRQHandler+0x304>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b7f      	cmp	r3, #127	; 0x7f
 8001042:	d80e      	bhi.n	8001062 <TIM2_IRQHandler+0x4e>
		{
			buffer_write[bw_index] = ADC1->DR;
 8001044:	4bb3      	ldr	r3, [pc, #716]	; (8001314 <TIM2_IRQHandler+0x300>)
 8001046:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001048:	4bb4      	ldr	r3, [pc, #720]	; (800131c <TIM2_IRQHandler+0x308>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4ab2      	ldr	r2, [pc, #712]	; (8001318 <TIM2_IRQHandler+0x304>)
 800104e:	8812      	ldrh	r2, [r2, #0]
 8001050:	189b      	adds	r3, r3, r2
 8001052:	b2ca      	uxtb	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
			++bw_index;
 8001056:	4bb0      	ldr	r3, [pc, #704]	; (8001318 <TIM2_IRQHandler+0x304>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	b29a      	uxth	r2, r3
 800105e:	4bae      	ldr	r3, [pc, #696]	; (8001318 <TIM2_IRQHandler+0x304>)
 8001060:	801a      	strh	r2, [r3, #0]
		}
		//Go inside after writing 128 byte to buffer
		if (bw_index >= 127)
 8001062:	4bad      	ldr	r3, [pc, #692]	; (8001318 <TIM2_IRQHandler+0x304>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	2b7e      	cmp	r3, #126	; 0x7e
 8001068:	d800      	bhi.n	800106c <TIM2_IRQHandler+0x58>
 800106a:	e145      	b.n	80012f8 <TIM2_IRQHandler+0x2e4>
		{
			//Write 128 byte data buffer to EEPROM
			//Page writing method used
			WriteMultipleByte(curr_devaddr, curr_memaddr, buffer_write, 128);
 800106c:	4bac      	ldr	r3, [pc, #688]	; (8001320 <TIM2_IRQHandler+0x30c>)
 800106e:	7818      	ldrb	r0, [r3, #0]
 8001070:	4bac      	ldr	r3, [pc, #688]	; (8001324 <TIM2_IRQHandler+0x310>)
 8001072:	8819      	ldrh	r1, [r3, #0]
 8001074:	4ba9      	ldr	r3, [pc, #676]	; (800131c <TIM2_IRQHandler+0x308>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	f7ff f957 	bl	800032c <WriteMultipleByte>
			//Increasing 128 byte recorded size of current EEPROM
			record_size = (uint16_t)(record_size + 128);
 800107e:	4baa      	ldr	r3, [pc, #680]	; (8001328 <TIM2_IRQHandler+0x314>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	3380      	adds	r3, #128	; 0x80
 8001084:	b29a      	uxth	r2, r3
 8001086:	4ba8      	ldr	r3, [pc, #672]	; (8001328 <TIM2_IRQHandler+0x314>)
 8001088:	801a      	strh	r2, [r3, #0]
			//Forward 128 byte from current memory address of current EEPROM
			curr_memaddr= (uint16_t)(curr_memaddr + 128);
 800108a:	4ba6      	ldr	r3, [pc, #664]	; (8001324 <TIM2_IRQHandler+0x310>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	3380      	adds	r3, #128	; 0x80
 8001090:	b29a      	uxth	r2, r3
 8001092:	4ba4      	ldr	r3, [pc, #656]	; (8001324 <TIM2_IRQHandler+0x310>)
 8001094:	801a      	strh	r2, [r3, #0]

			//Decrease recording time one when we write multiples of 6400 bytes(32000/5=6400)
			if(record_size == 6400 || record_size == 12800 || record_size == 19200 || record_size == 25600 || record_size == 32000)
 8001096:	4ba4      	ldr	r3, [pc, #656]	; (8001328 <TIM2_IRQHandler+0x314>)
 8001098:	881a      	ldrh	r2, [r3, #0]
 800109a:	23c8      	movs	r3, #200	; 0xc8
 800109c:	015b      	lsls	r3, r3, #5
 800109e:	429a      	cmp	r2, r3
 80010a0:	d017      	beq.n	80010d2 <TIM2_IRQHandler+0xbe>
 80010a2:	4ba1      	ldr	r3, [pc, #644]	; (8001328 <TIM2_IRQHandler+0x314>)
 80010a4:	881a      	ldrh	r2, [r3, #0]
 80010a6:	23c8      	movs	r3, #200	; 0xc8
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d011      	beq.n	80010d2 <TIM2_IRQHandler+0xbe>
 80010ae:	4b9e      	ldr	r3, [pc, #632]	; (8001328 <TIM2_IRQHandler+0x314>)
 80010b0:	881a      	ldrh	r2, [r3, #0]
 80010b2:	2396      	movs	r3, #150	; 0x96
 80010b4:	01db      	lsls	r3, r3, #7
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d00b      	beq.n	80010d2 <TIM2_IRQHandler+0xbe>
 80010ba:	4b9b      	ldr	r3, [pc, #620]	; (8001328 <TIM2_IRQHandler+0x314>)
 80010bc:	881a      	ldrh	r2, [r3, #0]
 80010be:	23c8      	movs	r3, #200	; 0xc8
 80010c0:	01db      	lsls	r3, r3, #7
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d005      	beq.n	80010d2 <TIM2_IRQHandler+0xbe>
 80010c6:	4b98      	ldr	r3, [pc, #608]	; (8001328 <TIM2_IRQHandler+0x314>)
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	23fa      	movs	r3, #250	; 0xfa
 80010cc:	01db      	lsls	r3, r3, #7
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d10e      	bne.n	80010f0 <TIM2_IRQHandler+0xdc>
			{
				//Decrease recording time
				record_time = (uint8_t)(record_time - 1);
 80010d2:	4b96      	ldr	r3, [pc, #600]	; (800132c <TIM2_IRQHandler+0x318>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b94      	ldr	r3, [pc, #592]	; (800132c <TIM2_IRQHandler+0x318>)
 80010dc:	701a      	strb	r2, [r3, #0]
				//Assign current time to state char array
				disp_letters[3] = IntToChar(record_time);
 80010de:	4b93      	ldr	r3, [pc, #588]	; (800132c <TIM2_IRQHandler+0x318>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	0018      	movs	r0, r3
 80010e4:	f7ff fd82 	bl	8000bec <IntToChar>
 80010e8:	0003      	movs	r3, r0
 80010ea:	001a      	movs	r2, r3
 80010ec:	4b90      	ldr	r3, [pc, #576]	; (8001330 <TIM2_IRQHandler+0x31c>)
 80010ee:	70da      	strb	r2, [r3, #3]
			}
			//Go inside when we write one track to EEPROM
			if (record_size >= MAX_TRACK_BYTE_SIZE)
 80010f0:	4b8d      	ldr	r3, [pc, #564]	; (8001328 <TIM2_IRQHandler+0x314>)
 80010f2:	881a      	ldrh	r2, [r3, #0]
 80010f4:	23fa      	movs	r3, #250	; 0xfa
 80010f6:	01db      	lsls	r3, r3, #7
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d343      	bcc.n	8001184 <TIM2_IRQHandler+0x170>
			{
				//ONE TRACK RECORDED

				//Recorded track index
				uint8_t track_recorded = 0;
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
				//If recorded track size is one go inside
				if(curr_memaddr == 32000)
 8001102:	4b88      	ldr	r3, [pc, #544]	; (8001324 <TIM2_IRQHandler+0x310>)
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	23fa      	movs	r3, #250	; 0xfa
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	429a      	cmp	r2, r3
 800110c:	d10e      	bne.n	800112c <TIM2_IRQHandler+0x118>
				{
					//If we have used first EEPROM then it represents first track else third track
					track_recorded = curr_devaddr == EEPROM_ADR1 ? 0 : 2;
 800110e:	4b84      	ldr	r3, [pc, #528]	; (8001320 <TIM2_IRQHandler+0x30c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b50      	cmp	r3, #80	; 0x50
 8001114:	d101      	bne.n	800111a <TIM2_IRQHandler+0x106>
 8001116:	2200      	movs	r2, #0
 8001118:	e000      	b.n	800111c <TIM2_IRQHandler+0x108>
 800111a:	2202      	movs	r2, #2
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	701a      	strb	r2, [r3, #0]
					//Set recorded track to true
					playable_track[track_recorded] = true;
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4a83      	ldr	r2, [pc, #524]	; (8001334 <TIM2_IRQHandler+0x320>)
 8001126:	2101      	movs	r1, #1
 8001128:	54d1      	strb	r1, [r2, r3]
 800112a:	e013      	b.n	8001154 <TIM2_IRQHandler+0x140>
				}
				//If recorded track size is two go inside
				else if(curr_memaddr == 64000)
 800112c:	4b7d      	ldr	r3, [pc, #500]	; (8001324 <TIM2_IRQHandler+0x310>)
 800112e:	881a      	ldrh	r2, [r3, #0]
 8001130:	23fa      	movs	r3, #250	; 0xfa
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	429a      	cmp	r2, r3
 8001136:	d10d      	bne.n	8001154 <TIM2_IRQHandler+0x140>
				{
					//If we have used first EEPROM then it represents second track else fourth track
					track_recorded = curr_devaddr == EEPROM_ADR1 ? 1 : 3;
 8001138:	4b79      	ldr	r3, [pc, #484]	; (8001320 <TIM2_IRQHandler+0x30c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b50      	cmp	r3, #80	; 0x50
 800113e:	d101      	bne.n	8001144 <TIM2_IRQHandler+0x130>
 8001140:	2201      	movs	r2, #1
 8001142:	e000      	b.n	8001146 <TIM2_IRQHandler+0x132>
 8001144:	2203      	movs	r2, #3
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	701a      	strb	r2, [r3, #0]
					//Set recorded track to true
					playable_track[track_recorded] = true;
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4a79      	ldr	r2, [pc, #484]	; (8001334 <TIM2_IRQHandler+0x320>)
 8001150:	2101      	movs	r1, #1
 8001152:	54d1      	strb	r1, [r2, r3]
				}
				//Finish writing state, return idle state
				curr_state = IDLE;
 8001154:	4b6e      	ldr	r3, [pc, #440]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
				SetStateProperty(curr_state);
 800115a:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff fdea 	bl	8000d38 <SetStateProperty>
				//Reset writing index
				bw_index = 0;
 8001164:	4b6c      	ldr	r3, [pc, #432]	; (8001318 <TIM2_IRQHandler+0x304>)
 8001166:	2200      	movs	r2, #0
 8001168:	801a      	strh	r2, [r3, #0]
				//Reset recorded size
				record_size = 0;
 800116a:	4b6f      	ldr	r3, [pc, #444]	; (8001328 <TIM2_IRQHandler+0x314>)
 800116c:	2200      	movs	r2, #0
 800116e:	801a      	strh	r2, [r3, #0]
				//Reset record time
				record_time = 5;
 8001170:	4b6e      	ldr	r3, [pc, #440]	; (800132c <TIM2_IRQHandler+0x318>)
 8001172:	2205      	movs	r2, #5
 8001174:	701a      	strb	r2, [r3, #0]
				//Update track size by increasing one
				track_size = (uint8_t)(track_size + 1);
 8001176:	4b70      	ldr	r3, [pc, #448]	; (8001338 <TIM2_IRQHandler+0x324>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b6e      	ldr	r3, [pc, #440]	; (8001338 <TIM2_IRQHandler+0x324>)
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e002      	b.n	800118a <TIM2_IRQHandler+0x176>
			}
			//Keep writing
			else
			{
				//Reset writing index
				bw_index = 0;
 8001184:	4b64      	ldr	r3, [pc, #400]	; (8001318 <TIM2_IRQHandler+0x304>)
 8001186:	2200      	movs	r2, #0
 8001188:	801a      	strh	r2, [r3, #0]
			}
			//If EEPROM is full then change EEPROM
			if(curr_memaddr >= MAX_TRACK_BYTE_SIZE * 2)
 800118a:	4b66      	ldr	r3, [pc, #408]	; (8001324 <TIM2_IRQHandler+0x310>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	4a6b      	ldr	r2, [pc, #428]	; (800133c <TIM2_IRQHandler+0x328>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d800      	bhi.n	8001196 <TIM2_IRQHandler+0x182>
 8001194:	e0b0      	b.n	80012f8 <TIM2_IRQHandler+0x2e4>
			{
				//Reset current memory address
				curr_memaddr = 0;
 8001196:	4b63      	ldr	r3, [pc, #396]	; (8001324 <TIM2_IRQHandler+0x310>)
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]
				//Change current device address
				curr_devaddr = curr_devaddr == EEPROM_ADR2 ? EEPROM_ADR1 : EEPROM_ADR2;
 800119c:	4b60      	ldr	r3, [pc, #384]	; (8001320 <TIM2_IRQHandler+0x30c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b54      	cmp	r3, #84	; 0x54
 80011a2:	d101      	bne.n	80011a8 <TIM2_IRQHandler+0x194>
 80011a4:	2250      	movs	r2, #80	; 0x50
 80011a6:	e000      	b.n	80011aa <TIM2_IRQHandler+0x196>
 80011a8:	2254      	movs	r2, #84	; 0x54
 80011aa:	4b5d      	ldr	r3, [pc, #372]	; (8001320 <TIM2_IRQHandler+0x30c>)
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e0a3      	b.n	80012f8 <TIM2_IRQHandler+0x2e4>


		}
	}
	//PLAYBACK STATE
	else if(curr_state == PLAY)
 80011b0:	4b57      	ldr	r3, [pc, #348]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d161      	bne.n	800127c <TIM2_IRQHandler+0x268>
	{
		//If read buffer is empty go inside
		if(can_read)
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <TIM2_IRQHandler+0x32c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <TIM2_IRQHandler+0x1c4>
		{
			//Read 128 byte data to buffer
			ReadMultipleByte(curr_readdevaddr, curr_readmemaddr, buffer_read, 128);
 80011c0:	4b60      	ldr	r3, [pc, #384]	; (8001344 <TIM2_IRQHandler+0x330>)
 80011c2:	7818      	ldrb	r0, [r3, #0]
 80011c4:	4b60      	ldr	r3, [pc, #384]	; (8001348 <TIM2_IRQHandler+0x334>)
 80011c6:	8819      	ldrh	r1, [r3, #0]
 80011c8:	4b60      	ldr	r3, [pc, #384]	; (800134c <TIM2_IRQHandler+0x338>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	f7ff f927 	bl	8000420 <ReadMultipleByte>
			//Ignore reading until whole buffer has been read
			can_read = false;
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <TIM2_IRQHandler+0x32c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
		}

		//If read buffer has sounds then play it
		if(read_index < 128 && !can_read)
 80011d8:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <TIM2_IRQHandler+0x33c>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2b7f      	cmp	r3, #127	; 0x7f
 80011de:	d816      	bhi.n	800120e <TIM2_IRQHandler+0x1fa>
 80011e0:	4b57      	ldr	r3, [pc, #348]	; (8001340 <TIM2_IRQHandler+0x32c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4053      	eors	r3, r2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00f      	beq.n	800120e <TIM2_IRQHandler+0x1fa>
		{
			PlaySound(buffer_read[read_index]);
 80011ee:	4b57      	ldr	r3, [pc, #348]	; (800134c <TIM2_IRQHandler+0x338>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a57      	ldr	r2, [pc, #348]	; (8001350 <TIM2_IRQHandler+0x33c>)
 80011f4:	8812      	ldrh	r2, [r2, #0]
 80011f6:	189b      	adds	r3, r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff fefa 	bl	8000ff4 <PlaySound>
			read_index++;
 8001200:	4b53      	ldr	r3, [pc, #332]	; (8001350 <TIM2_IRQHandler+0x33c>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b51      	ldr	r3, [pc, #324]	; (8001350 <TIM2_IRQHandler+0x33c>)
 800120a:	801a      	strh	r2, [r3, #0]
 800120c:	e074      	b.n	80012f8 <TIM2_IRQHandler+0x2e4>
		}
		//If reading of current buffer finish, then go inside
		else if(read_index >= 128 && !can_read)
 800120e:	4b50      	ldr	r3, [pc, #320]	; (8001350 <TIM2_IRQHandler+0x33c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	2b7f      	cmp	r3, #127	; 0x7f
 8001214:	d800      	bhi.n	8001218 <TIM2_IRQHandler+0x204>
 8001216:	e06f      	b.n	80012f8 <TIM2_IRQHandler+0x2e4>
 8001218:	4b49      	ldr	r3, [pc, #292]	; (8001340 <TIM2_IRQHandler+0x32c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2201      	movs	r2, #1
 800121e:	4053      	eors	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d068      	beq.n	80012f8 <TIM2_IRQHandler+0x2e4>
		{
			//If reading of last 128 byte has been occured then go inside
			if(curr_readmemaddr >= ((read_init_memaddr + MAX_TRACK_BYTE_SIZE) - 128))
 8001226:	4b4b      	ldr	r3, [pc, #300]	; (8001354 <TIM2_IRQHandler+0x340>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <TIM2_IRQHandler+0x344>)
 800122c:	4694      	mov	ip, r2
 800122e:	4463      	add	r3, ip
 8001230:	4a45      	ldr	r2, [pc, #276]	; (8001348 <TIM2_IRQHandler+0x334>)
 8001232:	8812      	ldrh	r2, [r2, #0]
 8001234:	4293      	cmp	r3, r2
 8001236:	da14      	bge.n	8001262 <TIM2_IRQHandler+0x24e>
			{
				//Reset reading memory address
				curr_readmemaddr = 0;
 8001238:	4b43      	ldr	r3, [pc, #268]	; (8001348 <TIM2_IRQHandler+0x334>)
 800123a:	2200      	movs	r2, #0
 800123c:	801a      	strh	r2, [r3, #0]
				//Reset reading device address
				curr_readdevaddr = EEPROM_ADR1;
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <TIM2_IRQHandler+0x330>)
 8001240:	2250      	movs	r2, #80	; 0x50
 8001242:	701a      	strb	r2, [r3, #0]
				//Reset reading index
				read_index = 0;
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <TIM2_IRQHandler+0x33c>)
 8001246:	2200      	movs	r2, #0
 8001248:	801a      	strh	r2, [r3, #0]
				//Finish reading and return idle state
				curr_state = IDLE;
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
				SetStateProperty(curr_state);
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fd6f 	bl	8000d38 <SetStateProperty>
				//Reset can_read bool to continue reading
				can_read = true;
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <TIM2_IRQHandler+0x32c>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e04a      	b.n	80012f8 <TIM2_IRQHandler+0x2e4>
			}
			//If there are values that must read then go inside
			else
			{
				//Forward 128 byte from current reading memory address
				curr_readmemaddr = (uint16_t)(curr_readmemaddr + 128);
 8001262:	4b39      	ldr	r3, [pc, #228]	; (8001348 <TIM2_IRQHandler+0x334>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	3380      	adds	r3, #128	; 0x80
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b37      	ldr	r3, [pc, #220]	; (8001348 <TIM2_IRQHandler+0x334>)
 800126c:	801a      	strh	r2, [r3, #0]
				//Reset reading index
				read_index = 0;
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <TIM2_IRQHandler+0x33c>)
 8001270:	2200      	movs	r2, #0
 8001272:	801a      	strh	r2, [r3, #0]
				//Reset can_read bool to continue reading
				can_read = true;
 8001274:	4b32      	ldr	r3, [pc, #200]	; (8001340 <TIM2_IRQHandler+0x32c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	e03d      	b.n	80012f8 <TIM2_IRQHandler+0x2e4>
			}
		}
	}
	//DELETE STATE
	else if(curr_state == DELETE && track_size > 0 && playable_track[selected_track - 1])
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d11f      	bne.n	80012c4 <TIM2_IRQHandler+0x2b0>
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <TIM2_IRQHandler+0x324>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01b      	beq.n	80012c4 <TIM2_IRQHandler+0x2b0>
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <TIM2_IRQHandler+0x348>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	4a28      	ldr	r2, [pc, #160]	; (8001334 <TIM2_IRQHandler+0x320>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d014      	beq.n	80012c4 <TIM2_IRQHandler+0x2b0>
	{
		//Return idle state after deleting
		curr_state = IDLE;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
		SetStateProperty(curr_state);
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff fd47 	bl	8000d38 <SetStateProperty>
		//Delete selected track
		playable_track[selected_track - 1] = false;
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <TIM2_IRQHandler+0x348>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	4a20      	ldr	r2, [pc, #128]	; (8001334 <TIM2_IRQHandler+0x320>)
 80012b2:	2100      	movs	r1, #0
 80012b4:	54d1      	strb	r1, [r2, r3]
		//Decrease current track size one
		track_size = (uint8_t)(track_size - 1);
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <TIM2_IRQHandler+0x324>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <TIM2_IRQHandler+0x324>)
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e019      	b.n	80012f8 <TIM2_IRQHandler+0x2e4>
	}
	//INVALID OPERATION STATE
	else if(curr_state == DELETE && (track_size <= 0 || !playable_track[selected_track - 1]))
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d115      	bne.n	80012f8 <TIM2_IRQHandler+0x2e4>
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <TIM2_IRQHandler+0x324>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <TIM2_IRQHandler+0x2d4>
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <TIM2_IRQHandler+0x348>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <TIM2_IRQHandler+0x320>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	2201      	movs	r2, #1
 80012e0:	4053      	eors	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <TIM2_IRQHandler+0x2e4>
	{
		//Set current state to invalid state
		curr_state = INVALID;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 80012ea:	2208      	movs	r2, #8
 80012ec:	701a      	strb	r2, [r3, #0]
		SetStateProperty(curr_state);
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <TIM2_IRQHandler+0x2fc>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff fd20 	bl	8000d38 <SetStateProperty>
	}
	//Resetting pending register to continue
	TIM2->SR &= ~(1U << 0);
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	05db      	lsls	r3, r3, #23
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	2101      	movs	r1, #1
 8001304:	438a      	bics	r2, r1
 8001306:	611a      	str	r2, [r3, #16]
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200000ac 	.word	0x200000ac
 8001314:	40012400 	.word	0x40012400
 8001318:	20000088 	.word	0x20000088
 800131c:	200000b0 	.word	0x200000b0
 8001320:	20000000 	.word	0x20000000
 8001324:	2000008e 	.word	0x2000008e
 8001328:	2000008c 	.word	0x2000008c
 800132c:	20000003 	.word	0x20000003
 8001330:	200000a8 	.word	0x200000a8
 8001334:	200000b8 	.word	0x200000b8
 8001338:	20000094 	.word	0x20000094
 800133c:	0000f9ff 	.word	0x0000f9ff
 8001340:	20000001 	.word	0x20000001
 8001344:	20000004 	.word	0x20000004
 8001348:	20000098 	.word	0x20000098
 800134c:	200000b4 	.word	0x200000b4
 8001350:	2000008a 	.word	0x2000008a
 8001354:	20000096 	.word	0x20000096
 8001358:	00007c7f 	.word	0x00007c7f
 800135c:	200000bc 	.word	0x200000bc

08001360 <TIM14_IRQHandler>:

void TIM14_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	//If debouncing exist, go inside
	if(!canButtonPress)
 8001366:	4b36      	ldr	r3, [pc, #216]	; (8001440 <TIM14_IRQHandler+0xe0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	4053      	eors	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <TIM14_IRQHandler+0x3c>
	{
		idle_counter = 0;
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <TIM14_IRQHandler+0xe4>)
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
		//Decreasing button counter time
		buttonPressCounter++;
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <TIM14_IRQHandler+0xe8>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <TIM14_IRQHandler+0xe8>)
 8001384:	701a      	strb	r2, [r3, #0]
		//Checking whether buttonPressCounter has reached zero or lower than zero
		if (buttonPressCounter >= 100)
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <TIM14_IRQHandler+0xe8>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b63      	cmp	r3, #99	; 0x63
 800138c:	d92c      	bls.n	80013e8 <TIM14_IRQHandler+0x88>
		{
			//Resetting debouncing preventer elements so that any button press can be read
			buttonPressCounter = 0;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <TIM14_IRQHandler+0xe8>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
			canButtonPress = true;
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <TIM14_IRQHandler+0xe0>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e025      	b.n	80013e8 <TIM14_IRQHandler+0x88>
		}
	}
	//If there are no button press go inside
	else if(curr_state != RECORD && curr_state != PLAY && curr_state != PAUSE && curr_state != IDLE)
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <TIM14_IRQHandler+0xec>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d021      	beq.n	80013e8 <TIM14_IRQHandler+0x88>
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <TIM14_IRQHandler+0xec>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d01d      	beq.n	80013e8 <TIM14_IRQHandler+0x88>
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <TIM14_IRQHandler+0xec>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d019      	beq.n	80013e8 <TIM14_IRQHandler+0x88>
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <TIM14_IRQHandler+0xec>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d015      	beq.n	80013e8 <TIM14_IRQHandler+0x88>
	{
		//Increase returning idle counter
		idle_counter++;
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <TIM14_IRQHandler+0xe4>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <TIM14_IRQHandler+0xe4>)
 80013c6:	801a      	strh	r2, [r3, #0]
		//If returning idle counter reachs 10000
		//then return idle state(1MS TIMER CLOCK * 10000 = 10 SEC)
		if(idle_counter >= 10000)
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <TIM14_IRQHandler+0xe4>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4a20      	ldr	r2, [pc, #128]	; (8001450 <TIM14_IRQHandler+0xf0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d90a      	bls.n	80013e8 <TIM14_IRQHandler+0x88>
		{
			//Reset returning idle counter
			idle_counter = 0;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <TIM14_IRQHandler+0xe4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	801a      	strh	r2, [r3, #0]
			//Set current state to idle state
			curr_state = IDLE;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <TIM14_IRQHandler+0xec>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
			SetStateProperty(curr_state);
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <TIM14_IRQHandler+0xec>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff fca8 	bl	8000d38 <SetStateProperty>
		}
	}

	//Displaying on SSD
	uint8_t offset = 0;
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
	int iterator;
	for(iterator = 3; iterator >= 0; --iterator)
 80013ee:	2303      	movs	r3, #3
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	e018      	b.n	8001426 <TIM14_IRQHandler+0xc6>
	{
		//Display one of current state letters
		DisplayChar(disp_letters[iterator]);
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <TIM14_IRQHandler+0xf4>)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	18d3      	adds	r3, r2, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fb95 	bl	8000b2c <DisplayChar>
		//For displaying smoothness
		delay(40);
 8001402:	2028      	movs	r0, #40	; 0x28
 8001404:	f7ff fc5a 	bl	8000cbc <delay>
		//Turn off all ssd leds
		ResetDisplay();
 8001408:	f7ff fc1c 	bl	8000c44 <ResetDisplay>
		//Shift digit section
		ShiftDigit((unsigned int)offset);
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff fb53 	bl	8000abc <ShiftDigit>
		//Increase offset from rightmost digit on SSD
		offset = (uint8_t)(offset + 1);
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	1dfa      	adds	r2, r7, #7
 800141a:	7812      	ldrb	r2, [r2, #0]
 800141c:	3201      	adds	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
	for(iterator = 3; iterator >= 0; --iterator)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	dae3      	bge.n	80013f4 <TIM14_IRQHandler+0x94>
	}
	//Resetting pending register to continue
	TIM14->SR &= ~(1U << 0);
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <TIM14_IRQHandler+0xf8>)
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <TIM14_IRQHandler+0xf8>)
 8001432:	2101      	movs	r1, #1
 8001434:	438a      	bics	r2, r1
 8001436:	611a      	str	r2, [r3, #16]
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000002 	.word	0x20000002
 8001444:	20000092 	.word	0x20000092
 8001448:	20000090 	.word	0x20000090
 800144c:	200000ac 	.word	0x200000ac
 8001450:	0000270f 	.word	0x0000270f
 8001454:	200000a8 	.word	0x200000a8
 8001458:	40002000 	.word	0x40002000

0800145c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  //COLUMN 1
  if (((GPIOB->IDR >> 5) & 1))
 8001462:	4b91      	ldr	r3, [pc, #580]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2201      	movs	r2, #1
 800146a:	4013      	ands	r3, r2
 800146c:	d05e      	beq.n	800152c <EXTI4_15_IRQHandler+0xd0>
  {
	 //If debouncing does not exist go inside
	if(canButtonPress)
 800146e:	4b8f      	ldr	r3, [pc, #572]	; (80016ac <EXTI4_15_IRQHandler+0x250>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d054      	beq.n	8001520 <EXTI4_15_IRQHandler+0xc4>
	{
		clearRow();
 8001476:	f7ff fc31 	bl	8000cdc <clearRow>
		//SELECT TRACK 1
		GPIOB->ODR ^= (1U << 7);
 800147a:	4b8b      	ldr	r3, [pc, #556]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	4b8a      	ldr	r3, [pc, #552]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	404a      	eors	r2, r1
 8001484:	615a      	str	r2, [r3, #20]
		if(((GPIOB->IDR >> 5) & 1))
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2201      	movs	r2, #1
 800148e:	4013      	ands	r3, r2
 8001490:	d005      	beq.n	800149e <EXTI4_15_IRQHandler+0x42>
		{
			//BUTTON(1)
			canButtonPress = false;
 8001492:	4b86      	ldr	r3, [pc, #536]	; (80016ac <EXTI4_15_IRQHandler+0x250>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
			selected_track = TRACK1;
 8001498:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
		}
		GPIOB->ODR ^= (1U << 7);
 800149e:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	404a      	eors	r2, r1
 80014a8:	615a      	str	r2, [r3, #20]

		//SELECT TRACK 4
		GPIOB->ODR ^= (1U << 6);
 80014aa:	4b7f      	ldr	r3, [pc, #508]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 80014b0:	2140      	movs	r1, #64	; 0x40
 80014b2:	404a      	eors	r2, r1
 80014b4:	615a      	str	r2, [r3, #20]
		if((((GPIOB->IDR >> 5) & 1)))
 80014b6:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	d005      	beq.n	80014ce <EXTI4_15_IRQHandler+0x72>
		{
			//BUTTON(4)
			canButtonPress = false;
 80014c2:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <EXTI4_15_IRQHandler+0x250>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
			selected_track = TRACK4;
 80014c8:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	701a      	strb	r2, [r3, #0]
		}
		GPIOB->ODR ^= (1U << 6);
 80014ce:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	4b75      	ldr	r3, [pc, #468]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	404a      	eors	r2, r1
 80014d8:	615a      	str	r2, [r3, #20]

		//SELECT DELETE STATE
		GPIOA->ODR ^= (1U << 0);
 80014da:	23a0      	movs	r3, #160	; 0xa0
 80014dc:	05db      	lsls	r3, r3, #23
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	23a0      	movs	r3, #160	; 0xa0
 80014e2:	05db      	lsls	r3, r3, #23
 80014e4:	2101      	movs	r1, #1
 80014e6:	404a      	eors	r2, r1
 80014e8:	615a      	str	r2, [r3, #20]
		if((((GPIOB->IDR >> 5) & 1)))
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	d00a      	beq.n	800150c <EXTI4_15_IRQHandler+0xb0>
		{
			//BUTTON(7)
			canButtonPress = false;
 80014f6:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <EXTI4_15_IRQHandler+0x250>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
			curr_state = DELETE;
 80014fc:	4b6d      	ldr	r3, [pc, #436]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 80014fe:	2205      	movs	r2, #5
 8001500:	701a      	strb	r2, [r3, #0]
			SetStateProperty(curr_state);
 8001502:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fc16 	bl	8000d38 <SetStateProperty>

		}
		GPIOA->ODR ^= (1U << 0);
 800150c:	23a0      	movs	r3, #160	; 0xa0
 800150e:	05db      	lsls	r3, r3, #23
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	23a0      	movs	r3, #160	; 0xa0
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	2101      	movs	r1, #1
 8001518:	404a      	eors	r2, r1
 800151a:	615a      	str	r2, [r3, #20]
		setRow();
 800151c:	f7ff fbf0 	bl	8000d00 <setRow>
	}
	EXTI->RPR1 |= (1U << 5);
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <EXTI4_15_IRQHandler+0x25c>)
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <EXTI4_15_IRQHandler+0x25c>)
 8001526:	2120      	movs	r1, #32
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]
  }
  //COLUMN 2
  if (((GPIOA->IDR >> 11) & 1))
 800152c:	23a0      	movs	r3, #160	; 0xa0
 800152e:	05db      	lsls	r3, r3, #23
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	0adb      	lsrs	r3, r3, #11
 8001534:	2201      	movs	r2, #1
 8001536:	4013      	ands	r3, r2
 8001538:	d100      	bne.n	800153c <EXTI4_15_IRQHandler+0xe0>
 800153a:	e106      	b.n	800174a <EXTI4_15_IRQHandler+0x2ee>
  {
	  //If debouncing does not exist go inside
	if(canButtonPress)
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <EXTI4_15_IRQHandler+0x250>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d100      	bne.n	8001546 <EXTI4_15_IRQHandler+0xea>
 8001544:	e0fa      	b.n	800173c <EXTI4_15_IRQHandler+0x2e0>
	{
		clearRow();
 8001546:	f7ff fbc9 	bl	8000cdc <clearRow>
		//SELECT TRACK 2
		GPIOB->ODR ^= (1U << 7);
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	404a      	eors	r2, r1
 8001554:	615a      	str	r2, [r3, #20]
		if (((GPIOA->IDR >> 11) & 1) && curr_state != PLAY)
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	0adb      	lsrs	r3, r3, #11
 800155e:	2201      	movs	r2, #1
 8001560:	4013      	ands	r3, r2
 8001562:	d009      	beq.n	8001578 <EXTI4_15_IRQHandler+0x11c>
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b03      	cmp	r3, #3
 800156a:	d005      	beq.n	8001578 <EXTI4_15_IRQHandler+0x11c>
		{
			//BUTTON(2)
			canButtonPress = false;
 800156c:	4b4f      	ldr	r3, [pc, #316]	; (80016ac <EXTI4_15_IRQHandler+0x250>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
			selected_track = TRACK2;
 8001572:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 8001574:	2202      	movs	r2, #2
 8001576:	701a      	strb	r2, [r3, #0]
		}
		GPIOB->ODR ^= (1U << 7);
 8001578:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	404a      	eors	r2, r1
 8001582:	615a      	str	r2, [r3, #20]

		//SELECT PLAYBACK STATE
		GPIOB->ODR ^= (1U << 6);
 8001584:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <EXTI4_15_IRQHandler+0x24c>)
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	404a      	eors	r2, r1
 800158e:	615a      	str	r2, [r3, #20]
		if((((GPIOA->IDR >> 11) & 1)) && selected_track > 0)
 8001590:	23a0      	movs	r3, #160	; 0xa0
 8001592:	05db      	lsls	r3, r3, #23
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	0adb      	lsrs	r3, r3, #11
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	d100      	bne.n	80015a0 <EXTI4_15_IRQHandler+0x144>
 800159e:	e0a3      	b.n	80016e8 <EXTI4_15_IRQHandler+0x28c>
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d100      	bne.n	80015aa <EXTI4_15_IRQHandler+0x14e>
 80015a8:	e09e      	b.n	80016e8 <EXTI4_15_IRQHandler+0x28c>
		{
			//BUTTON(5) PLAY
			canButtonPress = false;
 80015aa:	4b40      	ldr	r3, [pc, #256]	; (80016ac <EXTI4_15_IRQHandler+0x250>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
			//PAUSE STATE CONTROLLER
			bool pass_init = true;
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
			//If play button pressed when playing then set current state
			//to pause state
			if(curr_state == PLAY && playable_track[selected_track-1])
 80015b6:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d112      	bne.n	80015e4 <EXTI4_15_IRQHandler+0x188>
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	4a3d      	ldr	r2, [pc, #244]	; (80016bc <EXTI4_15_IRQHandler+0x260>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <EXTI4_15_IRQHandler+0x188>
			{
				//Pause state exist
				pass_init = false;
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
				curr_state = PAUSE;
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 80015d4:	2204      	movs	r2, #4
 80015d6:	701a      	strb	r2, [r3, #0]
				SetStateProperty(curr_state);
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fbab 	bl	8000d38 <SetStateProperty>
 80015e2:	e015      	b.n	8001610 <EXTI4_15_IRQHandler+0x1b4>
			}
			//If play button pressed when pausing then set current state
			//to play state
			else if(curr_state == PAUSE && playable_track[selected_track-1])
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d111      	bne.n	8001610 <EXTI4_15_IRQHandler+0x1b4>
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	4a32      	ldr	r2, [pc, #200]	; (80016bc <EXTI4_15_IRQHandler+0x260>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00a      	beq.n	8001610 <EXTI4_15_IRQHandler+0x1b4>
			{
				//Pause state exist
				pass_init = false;
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
				curr_state = PLAY;
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 8001602:	2203      	movs	r2, #3
 8001604:	701a      	strb	r2, [r3, #0]
				SetStateProperty(curr_state);
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	0018      	movs	r0, r3
 800160c:	f7ff fb94 	bl	8000d38 <SetStateProperty>
			}
			//Initialize track that will be played
			//If pause state exist then do not initialize
			//to prevent resetting memory
			if(pass_init && playable_track[selected_track-1])
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d100      	bne.n	800161a <EXTI4_15_IRQHandler+0x1be>
 8001618:	e066      	b.n	80016e8 <EXTI4_15_IRQHandler+0x28c>
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3b01      	subs	r3, #1
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <EXTI4_15_IRQHandler+0x260>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d05f      	beq.n	80016e8 <EXTI4_15_IRQHandler+0x28c>
			{
				//Selecting from first EEPROM
				if((selected_track == TRACK1 && playable_track[0]) || (selected_track == TRACK2 && playable_track[1]))
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d103      	bne.n	8001638 <EXTI4_15_IRQHandler+0x1dc>
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <EXTI4_15_IRQHandler+0x260>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d107      	bne.n	8001648 <EXTI4_15_IRQHandler+0x1ec>
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d119      	bne.n	8001674 <EXTI4_15_IRQHandler+0x218>
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <EXTI4_15_IRQHandler+0x260>)
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d015      	beq.n	8001674 <EXTI4_15_IRQHandler+0x218>
				{
					//Set reading device address to first EEPROM address
					curr_readdevaddr = EEPROM_ADR1;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <EXTI4_15_IRQHandler+0x264>)
 800164a:	2250      	movs	r2, #80	; 0x50
 800164c:	701a      	strb	r2, [r3, #0]
					//Set reading memory address to selected track beginning address
					curr_readmemaddr = selected_track == TRACK1 ? 0 : 32000;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <EXTI4_15_IRQHandler+0x1fe>
 8001656:	2200      	movs	r2, #0
 8001658:	e001      	b.n	800165e <EXTI4_15_IRQHandler+0x202>
 800165a:	23fa      	movs	r3, #250	; 0xfa
 800165c:	01da      	lsls	r2, r3, #7
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <EXTI4_15_IRQHandler+0x268>)
 8001660:	801a      	strh	r2, [r3, #0]
					//Set current state to playback state
					curr_state = PLAY;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 8001664:	2203      	movs	r2, #3
 8001666:	701a      	strb	r2, [r3, #0]
					SetStateProperty(curr_state);
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <EXTI4_15_IRQHandler+0x258>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fb63 	bl	8000d38 <SetStateProperty>
 8001672:	e035      	b.n	80016e0 <EXTI4_15_IRQHandler+0x284>
				}
				//Selecting from second EEPROM
				else if((selected_track == TRACK3 && playable_track[2]) || (selected_track == TRACK4 && playable_track[3]))
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d103      	bne.n	8001684 <EXTI4_15_IRQHandler+0x228>
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <EXTI4_15_IRQHandler+0x260>)
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d107      	bne.n	8001694 <EXTI4_15_IRQHandler+0x238>
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d129      	bne.n	80016e0 <EXTI4_15_IRQHandler+0x284>
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <EXTI4_15_IRQHandler+0x260>)
 800168e:	78db      	ldrb	r3, [r3, #3]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d025      	beq.n	80016e0 <EXTI4_15_IRQHandler+0x284>
				{
					//Set reading device address to second EEPROM address
					curr_readdevaddr = EEPROM_ADR2;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <EXTI4_15_IRQHandler+0x264>)
 8001696:	2254      	movs	r2, #84	; 0x54
 8001698:	701a      	strb	r2, [r3, #0]
					//Set reading memory address to selected track beginning address
					curr_readmemaddr = selected_track == TRACK3 ? 0 : 32000;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <EXTI4_15_IRQHandler+0x254>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d112      	bne.n	80016c8 <EXTI4_15_IRQHandler+0x26c>
 80016a2:	2200      	movs	r2, #0
 80016a4:	e012      	b.n	80016cc <EXTI4_15_IRQHandler+0x270>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	50000400 	.word	0x50000400
 80016ac:	20000002 	.word	0x20000002
 80016b0:	200000bc 	.word	0x200000bc
 80016b4:	200000ac 	.word	0x200000ac
 80016b8:	40021800 	.word	0x40021800
 80016bc:	200000b8 	.word	0x200000b8
 80016c0:	20000004 	.word	0x20000004
 80016c4:	20000098 	.word	0x20000098
 80016c8:	23fa      	movs	r3, #250	; 0xfa
 80016ca:	01da      	lsls	r2, r3, #7
 80016cc:	4b7a      	ldr	r3, [pc, #488]	; (80018b8 <EXTI4_15_IRQHandler+0x45c>)
 80016ce:	801a      	strh	r2, [r3, #0]
					//Set current state to playback state
					curr_state = PLAY;
 80016d0:	4b7a      	ldr	r3, [pc, #488]	; (80018bc <EXTI4_15_IRQHandler+0x460>)
 80016d2:	2203      	movs	r2, #3
 80016d4:	701a      	strb	r2, [r3, #0]
					SetStateProperty(curr_state);
 80016d6:	4b79      	ldr	r3, [pc, #484]	; (80018bc <EXTI4_15_IRQHandler+0x460>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff fb2c 	bl	8000d38 <SetStateProperty>
				}
				//Set initializing address to beginning of reading current memory address
				read_init_memaddr = curr_readmemaddr;
 80016e0:	4b75      	ldr	r3, [pc, #468]	; (80018b8 <EXTI4_15_IRQHandler+0x45c>)
 80016e2:	881a      	ldrh	r2, [r3, #0]
 80016e4:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <EXTI4_15_IRQHandler+0x464>)
 80016e6:	801a      	strh	r2, [r3, #0]
			}
		}
		GPIOB->ODR ^= (1U << 6);
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	4b75      	ldr	r3, [pc, #468]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 80016ee:	2140      	movs	r1, #64	; 0x40
 80016f0:	404a      	eors	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]

		//Set current state to status state
		GPIOA->ODR ^= (1U << 0);
 80016f4:	23a0      	movs	r3, #160	; 0xa0
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	23a0      	movs	r3, #160	; 0xa0
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	2101      	movs	r1, #1
 8001700:	404a      	eors	r2, r1
 8001702:	615a      	str	r2, [r3, #20]
		if ((((GPIOA->IDR >> 11) & 1)))
 8001704:	23a0      	movs	r3, #160	; 0xa0
 8001706:	05db      	lsls	r3, r3, #23
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	0adb      	lsrs	r3, r3, #11
 800170c:	2201      	movs	r2, #1
 800170e:	4013      	ands	r3, r2
 8001710:	d00a      	beq.n	8001728 <EXTI4_15_IRQHandler+0x2cc>
		{
			//BUTTON(8)
			canButtonPress = false;
 8001712:	4b6d      	ldr	r3, [pc, #436]	; (80018c8 <EXTI4_15_IRQHandler+0x46c>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
			curr_state = STATUS;
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <EXTI4_15_IRQHandler+0x460>)
 800171a:	2206      	movs	r2, #6
 800171c:	701a      	strb	r2, [r3, #0]
			SetStateProperty(curr_state);
 800171e:	4b67      	ldr	r3, [pc, #412]	; (80018bc <EXTI4_15_IRQHandler+0x460>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff fb08 	bl	8000d38 <SetStateProperty>
		}
		GPIOA->ODR ^= (1U << 0);
 8001728:	23a0      	movs	r3, #160	; 0xa0
 800172a:	05db      	lsls	r3, r3, #23
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	23a0      	movs	r3, #160	; 0xa0
 8001730:	05db      	lsls	r3, r3, #23
 8001732:	2101      	movs	r1, #1
 8001734:	404a      	eors	r2, r1
 8001736:	615a      	str	r2, [r3, #20]
		setRow();
 8001738:	f7ff fae2 	bl	8000d00 <setRow>
	}
	EXTI->RPR1 |= (1U << 11);
 800173c:	4b63      	ldr	r3, [pc, #396]	; (80018cc <EXTI4_15_IRQHandler+0x470>)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4b62      	ldr	r3, [pc, #392]	; (80018cc <EXTI4_15_IRQHandler+0x470>)
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	0109      	lsls	r1, r1, #4
 8001746:	430a      	orrs	r2, r1
 8001748:	60da      	str	r2, [r3, #12]
  }
  //COLUMN 3
  if (((GPIOA->IDR >> 12) & 1))
 800174a:	23a0      	movs	r3, #160	; 0xa0
 800174c:	05db      	lsls	r3, r3, #23
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	0b1b      	lsrs	r3, r3, #12
 8001752:	2201      	movs	r2, #1
 8001754:	4013      	ands	r3, r2
 8001756:	d100      	bne.n	800175a <EXTI4_15_IRQHandler+0x2fe>
 8001758:	e0aa      	b.n	80018b0 <EXTI4_15_IRQHandler+0x454>
  {
	  //If debouncing does not exist go inside
	if(canButtonPress)
 800175a:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <EXTI4_15_IRQHandler+0x46c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d100      	bne.n	8001764 <EXTI4_15_IRQHandler+0x308>
 8001762:	e09e      	b.n	80018a2 <EXTI4_15_IRQHandler+0x446>
	{
		clearRow();
 8001764:	f7ff faba 	bl	8000cdc <clearRow>
		//SELECT TRACK 3
		GPIOB->ODR ^= (1U << 7);
 8001768:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	404a      	eors	r2, r1
 8001772:	615a      	str	r2, [r3, #20]
		if (((GPIOA->IDR >> 12) & 1))
 8001774:	23a0      	movs	r3, #160	; 0xa0
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	0b1b      	lsrs	r3, r3, #12
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	d005      	beq.n	800178e <EXTI4_15_IRQHandler+0x332>
		{
			//BUTTON(3)
			canButtonPress = false;
 8001782:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <EXTI4_15_IRQHandler+0x46c>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
			selected_track = TRACK3;
 8001788:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <EXTI4_15_IRQHandler+0x474>)
 800178a:	2203      	movs	r2, #3
 800178c:	701a      	strb	r2, [r3, #0]
		}
		GPIOB->ODR ^= (1U << 7);
 800178e:	4b4d      	ldr	r3, [pc, #308]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	404a      	eors	r2, r1
 8001798:	615a      	str	r2, [r3, #20]

		//SELECT RECORD STATE
		GPIOB->ODR ^= (1U << 6);
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 80017a0:	2140      	movs	r1, #64	; 0x40
 80017a2:	404a      	eors	r2, r1
 80017a4:	615a      	str	r2, [r3, #20]
		if ((((GPIOA->IDR >> 12) & 1)))
 80017a6:	23a0      	movs	r3, #160	; 0xa0
 80017a8:	05db      	lsls	r3, r3, #23
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	0b1b      	lsrs	r3, r3, #12
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	d054      	beq.n	800185e <EXTI4_15_IRQHandler+0x402>
		{
			canButtonPress = false;
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <EXTI4_15_IRQHandler+0x46c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
			//BUTTON(6)
			//If EEPROMs are not full
			if(track_size < 4)
 80017ba:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <EXTI4_15_IRQHandler+0x478>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d845      	bhi.n	800184e <EXTI4_15_IRQHandler+0x3f2>
			{
				//Set current state to current state
				curr_state = RECORD;
 80017c2:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <EXTI4_15_IRQHandler+0x460>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]
				SetStateProperty(curr_state);
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <EXTI4_15_IRQHandler+0x460>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fab3 	bl	8000d38 <SetStateProperty>
				//Check selected track is recorded
				if(!playable_track[0] || !playable_track[1])
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <EXTI4_15_IRQHandler+0x47c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4053      	eors	r3, r2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <EXTI4_15_IRQHandler+0x392>
 80017e0:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <EXTI4_15_IRQHandler+0x47c>)
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4053      	eors	r3, r2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d010      	beq.n	8001810 <EXTI4_15_IRQHandler+0x3b4>
				{
					//Set device address to first EEPROM address
					curr_devaddr = EEPROM_ADR1;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <EXTI4_15_IRQHandler+0x480>)
 80017f0:	2250      	movs	r2, #80	; 0x50
 80017f2:	701a      	strb	r2, [r3, #0]
					//Set reading memory address
					curr_memaddr = !playable_track[0] ? 0 : 32000;
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <EXTI4_15_IRQHandler+0x47c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4053      	eors	r3, r2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <EXTI4_15_IRQHandler+0x3aa>
 8001802:	2200      	movs	r2, #0
 8001804:	e001      	b.n	800180a <EXTI4_15_IRQHandler+0x3ae>
 8001806:	23fa      	movs	r3, #250	; 0xfa
 8001808:	01da      	lsls	r2, r3, #7
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <EXTI4_15_IRQHandler+0x484>)
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	e026      	b.n	800185e <EXTI4_15_IRQHandler+0x402>
				}
				//Check selected track is recorded
				else if(!playable_track[2] || !playable_track[3])
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <EXTI4_15_IRQHandler+0x47c>)
 8001812:	789b      	ldrb	r3, [r3, #2]
 8001814:	2201      	movs	r2, #1
 8001816:	4053      	eors	r3, r2
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <EXTI4_15_IRQHandler+0x3d0>
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <EXTI4_15_IRQHandler+0x47c>)
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	2201      	movs	r2, #1
 8001824:	4053      	eors	r3, r2
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d018      	beq.n	800185e <EXTI4_15_IRQHandler+0x402>
				{
					//Set device address to first EEPROM address
					curr_devaddr = EEPROM_ADR2;
 800182c:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <EXTI4_15_IRQHandler+0x480>)
 800182e:	2254      	movs	r2, #84	; 0x54
 8001830:	701a      	strb	r2, [r3, #0]
					//Set reading memory address
					curr_memaddr = !playable_track[2] ? 0 : 32000;
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <EXTI4_15_IRQHandler+0x47c>)
 8001834:	789b      	ldrb	r3, [r3, #2]
 8001836:	2201      	movs	r2, #1
 8001838:	4053      	eors	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <EXTI4_15_IRQHandler+0x3e8>
 8001840:	2200      	movs	r2, #0
 8001842:	e001      	b.n	8001848 <EXTI4_15_IRQHandler+0x3ec>
 8001844:	23fa      	movs	r3, #250	; 0xfa
 8001846:	01da      	lsls	r2, r3, #7
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <EXTI4_15_IRQHandler+0x484>)
 800184a:	801a      	strh	r2, [r3, #0]
 800184c:	e007      	b.n	800185e <EXTI4_15_IRQHandler+0x402>
				}
			}
			//If EEPROMs are full change current state to current state
			else
			{
				curr_state = FULL;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <EXTI4_15_IRQHandler+0x460>)
 8001850:	2207      	movs	r2, #7
 8001852:	701a      	strb	r2, [r3, #0]
				SetStateProperty(curr_state);
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <EXTI4_15_IRQHandler+0x460>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff fa6d 	bl	8000d38 <SetStateProperty>
			}
		}
		GPIOB->ODR ^= (1U << 6);
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <EXTI4_15_IRQHandler+0x468>)
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	404a      	eors	r2, r1
 8001868:	615a      	str	r2, [r3, #20]

		//EMPTY KEY
		GPIOA->ODR ^= (1U << 0);
 800186a:	23a0      	movs	r3, #160	; 0xa0
 800186c:	05db      	lsls	r3, r3, #23
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	23a0      	movs	r3, #160	; 0xa0
 8001872:	05db      	lsls	r3, r3, #23
 8001874:	2101      	movs	r1, #1
 8001876:	404a      	eors	r2, r1
 8001878:	615a      	str	r2, [r3, #20]
		if ((((GPIOA->IDR >> 12) & 1)))
 800187a:	23a0      	movs	r3, #160	; 0xa0
 800187c:	05db      	lsls	r3, r3, #23
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	0b1b      	lsrs	r3, r3, #12
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	d002      	beq.n	800188e <EXTI4_15_IRQHandler+0x432>
		{
			//BUTTON(9)
			canButtonPress = false;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <EXTI4_15_IRQHandler+0x46c>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
		}
		GPIOA->ODR ^= (1U << 0);
 800188e:	23a0      	movs	r3, #160	; 0xa0
 8001890:	05db      	lsls	r3, r3, #23
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	23a0      	movs	r3, #160	; 0xa0
 8001896:	05db      	lsls	r3, r3, #23
 8001898:	2101      	movs	r1, #1
 800189a:	404a      	eors	r2, r1
 800189c:	615a      	str	r2, [r3, #20]
		setRow();
 800189e:	f7ff fa2f 	bl	8000d00 <setRow>
	}
	EXTI->RPR1 |= (1U << 12);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <EXTI4_15_IRQHandler+0x470>)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <EXTI4_15_IRQHandler+0x470>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0149      	lsls	r1, r1, #5
 80018ac:	430a      	orrs	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]
  }
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000098 	.word	0x20000098
 80018bc:	200000ac 	.word	0x200000ac
 80018c0:	20000096 	.word	0x20000096
 80018c4:	50000400 	.word	0x50000400
 80018c8:	20000002 	.word	0x20000002
 80018cc:	40021800 	.word	0x40021800
 80018d0:	200000bc 	.word	0x200000bc
 80018d4:	20000094 	.word	0x20000094
 80018d8:	200000b8 	.word	0x200000b8
 80018dc:	20000000 	.word	0x20000000
 80018e0:	2000008e 	.word	0x2000008e

080018e4 <ADCInit>:
//ADC INITIALIZATION
void ADCInit()
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	//PA1 USED FOR ADC

	//GPIOA-B PORT ENABLED
	RCC->IOPENR |= (3U);
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <ADCInit+0x94>)
 80018ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <ADCInit+0x94>)
 80018ee:	2103      	movs	r1, #3
 80018f0:	430a      	orrs	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34

	//ADC CLOCK ENABLED
	RCC->APBENR2 |= (1U << 20);
 80018f4:	4b20      	ldr	r3, [pc, #128]	; (8001978 <ADCInit+0x94>)
 80018f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <ADCInit+0x94>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0349      	lsls	r1, r1, #13
 80018fe:	430a      	orrs	r2, r1
 8001900:	641a      	str	r2, [r3, #64]	; 0x40

	//ADC VOLTAGE REGULATOR ENABLED
	ADC1->CR |= (1U << 28);
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <ADCInit+0x98>)
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <ADCInit+0x98>)
 8001908:	2180      	movs	r1, #128	; 0x80
 800190a:	0549      	lsls	r1, r1, #21
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]
	//WAIT AT LEAST 20US, AS SAID IN LECTURE
	delay(300000);
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <ADCInit+0x9c>)
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff f9d2 	bl	8000cbc <delay>

	//8 BIT RESOLUTION SELECTED
	ADC1->CFGR1 |= (1U << 4);
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <ADCInit+0x98>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <ADCInit+0x98>)
 800191e:	2110      	movs	r1, #16
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]

	//ADC CALIBRATION ENABLED
	ADC1->CR |= (1U << 31);
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <ADCInit+0x98>)
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <ADCInit+0x98>)
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	0609      	lsls	r1, r1, #24
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
	//WAIT UNTIL END OF CALIBRATION FLAG IS SET
	while (!(ADC1->ISR & (1U << 11)));
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <ADCInit+0x98>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	4013      	ands	r3, r2
 800193e:	d0f9      	beq.n	8001934 <ADCInit+0x50>

	//ADC SAMPLING TIME SELECTED MAX 3.5 ADC CLOCK CYCLE
	ADC1->SMPR |= (1U);
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <ADCInit+0x98>)
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <ADCInit+0x98>)
 8001946:	2101      	movs	r1, #1
 8001948:	430a      	orrs	r2, r1
 800194a:	615a      	str	r2, [r3, #20]

	//ADC CHANNEL 1 SELECTED
	ADC1->CHSELR |= (1U << 1);
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <ADCInit+0x98>)
 800194e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <ADCInit+0x98>)
 8001952:	2102      	movs	r1, #2
 8001954:	430a      	orrs	r2, r1
 8001956:	629a      	str	r2, [r3, #40]	; 0x28

	//ADC ENABLED
	ADC1->CR |= (1U);
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <ADCInit+0x98>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <ADCInit+0x98>)
 800195e:	2101      	movs	r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	609a      	str	r2, [r3, #8]
	//WAIT UNTIL ADC GETS READY
	while (!(ADC1->ISR & 1U));
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <ADCInit+0x98>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2201      	movs	r2, #1
 800196c:	4013      	ands	r3, r2
 800196e:	d0fa      	beq.n	8001966 <ADCInit+0x82>
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	40012400 	.word	0x40012400
 8001980:	000493e0 	.word	0x000493e0

08001984 <Keypad_SSD_GPIO_Init>:

//KEYPAD & SSD INITIALIZER
void Keypad_SSD_GPIO_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	//Set B6 B7 A0 as output rows
	GPIOB->MODER &= ~(3U << 2 * 6);
 8001988:	4b62      	ldr	r3, [pc, #392]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 800198e:	4962      	ldr	r1, [pc, #392]	; (8001b18 <Keypad_SSD_GPIO_Init+0x194>)
 8001990:	400a      	ands	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2 * 6);
 8001994:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	0149      	lsls	r1, r1, #5
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

	GPIOB->MODER &= ~(3U << 2 * 7);
 80019a2:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 80019a8:	495c      	ldr	r1, [pc, #368]	; (8001b1c <Keypad_SSD_GPIO_Init+0x198>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2 * 7);
 80019ae:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	01c9      	lsls	r1, r1, #7
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

	GPIOA->MODER &= ~(3U << 2 * 0);
 80019bc:	23a0      	movs	r3, #160	; 0xa0
 80019be:	05db      	lsls	r3, r3, #23
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	23a0      	movs	r3, #160	; 0xa0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	2103      	movs	r1, #3
 80019c8:	438a      	bics	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 2 * 0);
 80019cc:	23a0      	movs	r3, #160	; 0xa0
 80019ce:	05db      	lsls	r3, r3, #23
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	23a0      	movs	r3, #160	; 0xa0
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	2101      	movs	r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

	//Set B5 A11 A12 as input column
	GPIOB->MODER &= ~(3U << 2 * 5);
 80019dc:	4b4d      	ldr	r3, [pc, #308]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 80019e2:	494f      	ldr	r1, [pc, #316]	; (8001b20 <Keypad_SSD_GPIO_Init+0x19c>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
	GPIOB->PUPDR |= (2U << 2 * 5);
 80019e8:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	0109      	lsls	r1, r1, #4
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]

	GPIOA->MODER &= ~(3U << 2 * 11);
 80019f6:	23a0      	movs	r3, #160	; 0xa0
 80019f8:	05db      	lsls	r3, r3, #23
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	23a0      	movs	r3, #160	; 0xa0
 80019fe:	05db      	lsls	r3, r3, #23
 8001a00:	4948      	ldr	r1, [pc, #288]	; (8001b24 <Keypad_SSD_GPIO_Init+0x1a0>)
 8001a02:	400a      	ands	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR |= (2U << 2 * 11);
 8001a06:	23a0      	movs	r3, #160	; 0xa0
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	23a0      	movs	r3, #160	; 0xa0
 8001a0e:	05db      	lsls	r3, r3, #23
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	0409      	lsls	r1, r1, #16
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]

	GPIOA->MODER &= ~(3U << 2 * 12);
 8001a18:	23a0      	movs	r3, #160	; 0xa0
 8001a1a:	05db      	lsls	r3, r3, #23
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	23a0      	movs	r3, #160	; 0xa0
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	4941      	ldr	r1, [pc, #260]	; (8001b28 <Keypad_SSD_GPIO_Init+0x1a4>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR |= (2U << 2 * 12);
 8001a28:	23a0      	movs	r3, #160	; 0xa0
 8001a2a:	05db      	lsls	r3, r3, #23
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	23a0      	movs	r3, #160	; 0xa0
 8001a30:	05db      	lsls	r3, r3, #23
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0489      	lsls	r1, r1, #18
 8001a36:	430a      	orrs	r2, r1
 8001a38:	60da      	str	r2, [r3, #12]

	//SSD B0 PORT
	GPIOB->MODER &= ~(3U << 2 * 0);
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a40:	2103      	movs	r1, #3
 8001a42:	438a      	bics	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 2 * 0);
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]
	GPIOB->ODR |= (1U << 1 * 0);
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a58:	2101      	movs	r1, #1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	615a      	str	r2, [r3, #20]

	//KEYPAD +5V PORTS
	GPIOB->ODR |= (1U << 6);
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a64:	2140      	movs	r1, #64	; 0x40
 8001a66:	430a      	orrs	r2, r1
 8001a68:	615a      	str	r2, [r3, #20]
	GPIOB->ODR |= (1U << 7);
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <Keypad_SSD_GPIO_Init+0x190>)
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	430a      	orrs	r2, r1
 8001a74:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= (1U << 0);
 8001a76:	23a0      	movs	r3, #160	; 0xa0
 8001a78:	05db      	lsls	r3, r3, #23
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	23a0      	movs	r3, #160	; 0xa0
 8001a7e:	05db      	lsls	r3, r3, #23
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	615a      	str	r2, [r3, #20]

	//Set external interrupt for keypad
	EXTI->EXTICR[1] |= (1U << 8 * 1);//B5
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001a88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0049      	lsls	r1, r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	665a      	str	r2, [r3, #100]	; 0x64
	EXTI->RTSR1 |= (1U << 5);
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001a9a:	2120      	movs	r1, #32
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
	EXTI->IMR1 |= (1U << 5);
 8001aa0:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	58d3      	ldr	r3, [r2, r3]
 8001aa6:	4921      	ldr	r1, [pc, #132]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	508b      	str	r3, [r1, r2]

	EXTI->EXTICR[2] |= (0U << 8 * 3);//A11
 8001ab0:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001ab4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ab6:	669a      	str	r2, [r3, #104]	; 0x68
	EXTI->RTSR1 |= (1U << 11);
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	0109      	lsls	r1, r1, #4
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
	EXTI->IMR1 |= (1U << 11);
 8001ac6:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	58d3      	ldr	r3, [r2, r3]
 8001acc:	4917      	ldr	r1, [pc, #92]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	508b      	str	r3, [r1, r2]

	EXTI->EXTICR[3] |= (0U << 8 * 0);//A12
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001adc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001ade:	66da      	str	r2, [r3, #108]	; 0x6c
	EXTI->RTSR1 |= (1U << 12);
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	0149      	lsls	r1, r1, #5
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
	EXTI->IMR1 |= (1U << 12);
 8001aee:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	58d3      	ldr	r3, [r2, r3]
 8001af4:	490d      	ldr	r1, [pc, #52]	; (8001b2c <Keypad_SSD_GPIO_Init+0x1a8>)
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0152      	lsls	r2, r2, #5
 8001afa:	4313      	orrs	r3, r2
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	508b      	str	r3, [r1, r2]

	NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8001b00:	2100      	movs	r1, #0
 8001b02:	2007      	movs	r0, #7
 8001b04:	f7fe fd4a 	bl	800059c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001b08:	2007      	movs	r0, #7
 8001b0a:	f7fe fd2d 	bl	8000568 <__NVIC_EnableIRQ>

}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	50000400 	.word	0x50000400
 8001b18:	ffffcfff 	.word	0xffffcfff
 8001b1c:	ffff3fff 	.word	0xffff3fff
 8001b20:	fffff3ff 	.word	0xfffff3ff
 8001b24:	ff3fffff 	.word	0xff3fffff
 8001b28:	fcffffff 	.word	0xfcffffff
 8001b2c:	40021800 	.word	0x40021800

08001b30 <main>:

int main(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	//Allocating 128 byte data on heap memory for write buffer
	buffer_write = (uint8_t*)malloc(sizeof(uint8_t) * 128);
 8001b34:	2080      	movs	r0, #128	; 0x80
 8001b36:	f000 f8f1 	bl	8001d1c <malloc>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <main+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
	//Allocating 128 byte data on heap memory for read buffer
	buffer_read = (uint8_t*)malloc(sizeof(uint8_t) * 128);
 8001b42:	2080      	movs	r0, #128	; 0x80
 8001b44:	f000 f8ea 	bl	8001d1c <malloc>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <main+0x6c>)
 8001b4e:	601a      	str	r2, [r3, #0]

	//Set playable track bools to false not to play or delete
	playable_track[0]=playable_track[1]=playable_track[2]=playable_track[3]=false;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <main+0x70>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	70da      	strb	r2, [r3, #3]
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <main+0x70>)
 8001b58:	78da      	ldrb	r2, [r3, #3]
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <main+0x70>)
 8001b5c:	709a      	strb	r2, [r3, #2]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <main+0x70>)
 8001b60:	789a      	ldrb	r2, [r3, #2]
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <main+0x70>)
 8001b64:	705a      	strb	r2, [r3, #1]
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <main+0x70>)
 8001b68:	785a      	ldrb	r2, [r3, #1]
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <main+0x70>)
 8001b6c:	701a      	strb	r2, [r3, #0]

	//Set current state START
	curr_state = START;
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <main+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
	//Set current state properties
	SetStateProperty(curr_state);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <main+0x74>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff f8dd 	bl	8000d38 <SetStateProperty>

	//Initializing ADC
	ADCInit();
 8001b7e:	f7ff feb1 	bl	80018e4 <ADCInit>
	//Initializing PWM
	INIT_PWM();
 8001b82:	f7ff f97b 	bl	8000e7c <INIT_PWM>
	//Initializing EEPROMs
	INIT_EEPROM_512();
 8001b86:	f7fe fb45 	bl	8000214 <INIT_EEPROM_512>
	//Initializing TIMER14
	INIT_TIMER14();
 8001b8a:	f7ff fa03 	bl	8000f94 <INIT_TIMER14>
	//Initializing KEYPAD & SSD
	Keypad_SSD_GPIO_Init();
 8001b8e:	f7ff fef9 	bl	8001984 <Keypad_SSD_GPIO_Init>
	//Initializing TIMER2
	INIT_TIMER2();
 8001b92:	f7ff f9c9 	bl	8000f28 <INIT_TIMER2>
	while (1)
 8001b96:	e7fe      	b.n	8001b96 <main+0x66>
 8001b98:	200000b0 	.word	0x200000b0
 8001b9c:	200000b4 	.word	0x200000b4
 8001ba0:	200000b8 	.word	0x200000b8
 8001ba4:	200000ac 	.word	0x200000ac

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <NMI_Handler+0x4>

08001bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <HardFault_Handler+0x4>

08001bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bcc:	f000 f86a 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	18d3      	adds	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f000 f85e 	bl	8001cc8 <__errno>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	425b      	negs	r3, r3
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	18d2      	adds	r2, r2, r3
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b006      	add	sp, #24
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20002000 	.word	0x20002000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	2000009c 	.word	0x2000009c
 8001c40:	200000d8 	.word	0x200000d8

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c54:	f7ff fff6 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c5a:	490d      	ldr	r1, [pc, #52]	; (8001c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <LoopForever+0xe>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c70:	4c0a      	ldr	r4, [pc, #40]	; (8001c9c <LoopForever+0x16>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c7e:	f000 f829 	bl	8001cd4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c82:	f7ff ff55 	bl	8001b30 <main>

08001c86 <LoopForever>:

LoopForever:
  b LoopForever
 8001c86:	e7fe      	b.n	8001c86 <LoopForever>
  ldr   r0, =_estack
 8001c88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c94:	08001fbc 	.word	0x08001fbc
  ldr r2, =_sbss
 8001c98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c9c:	200000d4 	.word	0x200000d4

08001ca0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC1_IRQHandler>
	...

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	001a      	movs	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	18d2      	adds	r2, r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	20000005 	.word	0x20000005
 8001cc4:	200000c0 	.word	0x200000c0

08001cc8 <__errno>:
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <__errno+0x8>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	4770      	bx	lr
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <__libc_init_array>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	2600      	movs	r6, #0
 8001cd8:	4d0c      	ldr	r5, [pc, #48]	; (8001d0c <__libc_init_array+0x38>)
 8001cda:	4c0d      	ldr	r4, [pc, #52]	; (8001d10 <__libc_init_array+0x3c>)
 8001cdc:	1b64      	subs	r4, r4, r5
 8001cde:	10a4      	asrs	r4, r4, #2
 8001ce0:	42a6      	cmp	r6, r4
 8001ce2:	d109      	bne.n	8001cf8 <__libc_init_array+0x24>
 8001ce4:	2600      	movs	r6, #0
 8001ce6:	f000 f8a5 	bl	8001e34 <_init>
 8001cea:	4d0a      	ldr	r5, [pc, #40]	; (8001d14 <__libc_init_array+0x40>)
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <__libc_init_array+0x44>)
 8001cee:	1b64      	subs	r4, r4, r5
 8001cf0:	10a4      	asrs	r4, r4, #2
 8001cf2:	42a6      	cmp	r6, r4
 8001cf4:	d105      	bne.n	8001d02 <__libc_init_array+0x2e>
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	00b3      	lsls	r3, r6, #2
 8001cfa:	58eb      	ldr	r3, [r5, r3]
 8001cfc:	4798      	blx	r3
 8001cfe:	3601      	adds	r6, #1
 8001d00:	e7ee      	b.n	8001ce0 <__libc_init_array+0xc>
 8001d02:	00b3      	lsls	r3, r6, #2
 8001d04:	58eb      	ldr	r3, [r5, r3]
 8001d06:	4798      	blx	r3
 8001d08:	3601      	adds	r6, #1
 8001d0a:	e7f2      	b.n	8001cf2 <__libc_init_array+0x1e>
 8001d0c:	08001fb4 	.word	0x08001fb4
 8001d10:	08001fb4 	.word	0x08001fb4
 8001d14:	08001fb4 	.word	0x08001fb4
 8001d18:	08001fb8 	.word	0x08001fb8

08001d1c <malloc>:
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <malloc+0x10>)
 8001d20:	0001      	movs	r1, r0
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	f000 f804 	bl	8001d30 <_malloc_r>
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	20000008 	.word	0x20000008

08001d30 <_malloc_r>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	2303      	movs	r3, #3
 8001d34:	1ccd      	adds	r5, r1, #3
 8001d36:	439d      	bics	r5, r3
 8001d38:	3508      	adds	r5, #8
 8001d3a:	0006      	movs	r6, r0
 8001d3c:	2d0c      	cmp	r5, #12
 8001d3e:	d21f      	bcs.n	8001d80 <_malloc_r+0x50>
 8001d40:	250c      	movs	r5, #12
 8001d42:	42a9      	cmp	r1, r5
 8001d44:	d81e      	bhi.n	8001d84 <_malloc_r+0x54>
 8001d46:	0030      	movs	r0, r6
 8001d48:	f000 f862 	bl	8001e10 <__malloc_lock>
 8001d4c:	4925      	ldr	r1, [pc, #148]	; (8001de4 <_malloc_r+0xb4>)
 8001d4e:	680a      	ldr	r2, [r1, #0]
 8001d50:	0014      	movs	r4, r2
 8001d52:	2c00      	cmp	r4, #0
 8001d54:	d11a      	bne.n	8001d8c <_malloc_r+0x5c>
 8001d56:	4f24      	ldr	r7, [pc, #144]	; (8001de8 <_malloc_r+0xb8>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d104      	bne.n	8001d68 <_malloc_r+0x38>
 8001d5e:	0021      	movs	r1, r4
 8001d60:	0030      	movs	r0, r6
 8001d62:	f000 f843 	bl	8001dec <_sbrk_r>
 8001d66:	6038      	str	r0, [r7, #0]
 8001d68:	0029      	movs	r1, r5
 8001d6a:	0030      	movs	r0, r6
 8001d6c:	f000 f83e 	bl	8001dec <_sbrk_r>
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	d12b      	bne.n	8001dcc <_malloc_r+0x9c>
 8001d74:	230c      	movs	r3, #12
 8001d76:	0030      	movs	r0, r6
 8001d78:	6033      	str	r3, [r6, #0]
 8001d7a:	f000 f851 	bl	8001e20 <__malloc_unlock>
 8001d7e:	e003      	b.n	8001d88 <_malloc_r+0x58>
 8001d80:	2d00      	cmp	r5, #0
 8001d82:	dade      	bge.n	8001d42 <_malloc_r+0x12>
 8001d84:	230c      	movs	r3, #12
 8001d86:	6033      	str	r3, [r6, #0]
 8001d88:	2000      	movs	r0, #0
 8001d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	1b5b      	subs	r3, r3, r5
 8001d90:	d419      	bmi.n	8001dc6 <_malloc_r+0x96>
 8001d92:	2b0b      	cmp	r3, #11
 8001d94:	d903      	bls.n	8001d9e <_malloc_r+0x6e>
 8001d96:	6023      	str	r3, [r4, #0]
 8001d98:	18e4      	adds	r4, r4, r3
 8001d9a:	6025      	str	r5, [r4, #0]
 8001d9c:	e003      	b.n	8001da6 <_malloc_r+0x76>
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	42a2      	cmp	r2, r4
 8001da2:	d10e      	bne.n	8001dc2 <_malloc_r+0x92>
 8001da4:	600b      	str	r3, [r1, #0]
 8001da6:	0030      	movs	r0, r6
 8001da8:	f000 f83a 	bl	8001e20 <__malloc_unlock>
 8001dac:	0020      	movs	r0, r4
 8001dae:	2207      	movs	r2, #7
 8001db0:	300b      	adds	r0, #11
 8001db2:	1d23      	adds	r3, r4, #4
 8001db4:	4390      	bics	r0, r2
 8001db6:	1ac2      	subs	r2, r0, r3
 8001db8:	4298      	cmp	r0, r3
 8001dba:	d0e6      	beq.n	8001d8a <_malloc_r+0x5a>
 8001dbc:	1a1b      	subs	r3, r3, r0
 8001dbe:	50a3      	str	r3, [r4, r2]
 8001dc0:	e7e3      	b.n	8001d8a <_malloc_r+0x5a>
 8001dc2:	6053      	str	r3, [r2, #4]
 8001dc4:	e7ef      	b.n	8001da6 <_malloc_r+0x76>
 8001dc6:	0022      	movs	r2, r4
 8001dc8:	6864      	ldr	r4, [r4, #4]
 8001dca:	e7c2      	b.n	8001d52 <_malloc_r+0x22>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	1cc4      	adds	r4, r0, #3
 8001dd0:	439c      	bics	r4, r3
 8001dd2:	42a0      	cmp	r0, r4
 8001dd4:	d0e1      	beq.n	8001d9a <_malloc_r+0x6a>
 8001dd6:	1a21      	subs	r1, r4, r0
 8001dd8:	0030      	movs	r0, r6
 8001dda:	f000 f807 	bl	8001dec <_sbrk_r>
 8001dde:	1c43      	adds	r3, r0, #1
 8001de0:	d1db      	bne.n	8001d9a <_malloc_r+0x6a>
 8001de2:	e7c7      	b.n	8001d74 <_malloc_r+0x44>
 8001de4:	200000a0 	.word	0x200000a0
 8001de8:	200000a4 	.word	0x200000a4

08001dec <_sbrk_r>:
 8001dec:	2300      	movs	r3, #0
 8001dee:	b570      	push	{r4, r5, r6, lr}
 8001df0:	4d06      	ldr	r5, [pc, #24]	; (8001e0c <_sbrk_r+0x20>)
 8001df2:	0004      	movs	r4, r0
 8001df4:	0008      	movs	r0, r1
 8001df6:	602b      	str	r3, [r5, #0]
 8001df8:	f7ff feee 	bl	8001bd8 <_sbrk>
 8001dfc:	1c43      	adds	r3, r0, #1
 8001dfe:	d103      	bne.n	8001e08 <_sbrk_r+0x1c>
 8001e00:	682b      	ldr	r3, [r5, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d000      	beq.n	8001e08 <_sbrk_r+0x1c>
 8001e06:	6023      	str	r3, [r4, #0]
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	200000c4 	.word	0x200000c4

08001e10 <__malloc_lock>:
 8001e10:	b510      	push	{r4, lr}
 8001e12:	4802      	ldr	r0, [pc, #8]	; (8001e1c <__malloc_lock+0xc>)
 8001e14:	f000 f80c 	bl	8001e30 <__retarget_lock_acquire_recursive>
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	200000cc 	.word	0x200000cc

08001e20 <__malloc_unlock>:
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4802      	ldr	r0, [pc, #8]	; (8001e2c <__malloc_unlock+0xc>)
 8001e24:	f000 f805 	bl	8001e32 <__retarget_lock_release_recursive>
 8001e28:	bd10      	pop	{r4, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	200000cc 	.word	0x200000cc

08001e30 <__retarget_lock_acquire_recursive>:
 8001e30:	4770      	bx	lr

08001e32 <__retarget_lock_release_recursive>:
 8001e32:	4770      	bx	lr

08001e34 <_init>:
 8001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3a:	bc08      	pop	{r3}
 8001e3c:	469e      	mov	lr, r3
 8001e3e:	4770      	bx	lr

08001e40 <_fini>:
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e46:	bc08      	pop	{r3}
 8001e48:	469e      	mov	lr, r3
 8001e4a:	4770      	bx	lr
